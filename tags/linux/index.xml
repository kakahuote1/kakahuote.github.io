<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Linux on kakahuote</title>
        <link>https://blog.928330.xyz/tags/linux/</link>
        <description>Recent content in Linux on kakahuote</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Thu, 24 Jul 2025 22:41:31 +0800</lastBuildDate><atom:link href="https://blog.928330.xyz/tags/linux/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Nginx入门</title>
        <link>https://blog.928330.xyz/p/nginx%E5%85%A5%E9%97%A8/</link>
        <pubDate>Thu, 24 Jul 2025 22:15:30 +0800</pubDate>
        
        <guid>https://blog.928330.xyz/p/nginx%E5%85%A5%E9%97%A8/</guid>
        <description>&lt;p&gt;&lt;span style=&#34;color:aqua;font-size:20px&#34;&gt;本教程暂时只针对Docker容器的nginx，切勿看错&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;nginxdocker使用教程&#34;&gt;Nginx（docker）使用教程
&lt;/h1&gt;&lt;h2 id=&#34;什么是nginx&#34;&gt;什么是Nginx
&lt;/h2&gt;&lt;p&gt;Nginx（发音为 &amp;ldquo;engine-X&amp;rdquo;）是一款开源的、高性能的HTTP和反向代理服务器&lt;/p&gt;
&lt;p&gt;它的设计哲学是提供极致的性能、稳定性、丰富的功能、简单的配置和低资源消耗，看上去就很厉害&lt;/p&gt;
&lt;h3 id=&#34;高性能的工作进程模型&#34;&gt;高性能的工作进程模型
&lt;/h3&gt;&lt;p&gt;Nginx采用事件驱动的异步非阻塞架构&lt;/p&gt;
&lt;p&gt;与传统的Apache等服务器为每个请求创建一个新进程或线程不同，Nginx使用一个主进程和少数几个工作进程&lt;/p&gt;
&lt;p&gt;主进程负责读取配置、管理工作进程，而真正处理网络请求的是工作进程&lt;/p&gt;
&lt;p&gt;每个工作进程都是单线程的，异步地处理成千上万个并发连接&lt;/p&gt;
&lt;p&gt;这种模型避免了创建和销毁进程/线程的开销以及上下文切换的成本，因此能以极低的内存占用应对高并发场景&lt;/p&gt;
&lt;h3 id=&#34;主要用法&#34;&gt;主要用法
&lt;/h3&gt;&lt;h4 id=&#34;web服务器&#34;&gt;Web服务器
&lt;/h4&gt;&lt;p&gt;直接向客户端提供静态资源（如HTML、CSS、图片）的服务&lt;/p&gt;
&lt;p&gt;由于其高效的文件读取和网络传输能力，Nginx在处理静态内容方面表现极其出色,&lt;del&gt;适合搭建博客&lt;/del&gt;&lt;/p&gt;
&lt;h4 id=&#34;反向代理服务器&#34;&gt;反向代理服务器
&lt;/h4&gt;&lt;p&gt;它是是客户端和后端真实服务器之间的中间人&lt;/p&gt;
&lt;p&gt;它可以将客户端请求转发到后端的应用服务器（如Node.js、Java、Python应用），并将后端响应返回给客户端，从而实现请求分发、负载均衡，并能隐藏后端服务的真实IP和端口，提升安全性&lt;/p&gt;
&lt;h4 id=&#34;负载均衡器&#34;&gt;负载均衡器
&lt;/h4&gt;&lt;p&gt;当后端有多台服务器时，Nginx可以根据预设的策略将请求分发到这些服务器上，从而分担单一服务器的压力&lt;/p&gt;
&lt;h4 id=&#34;api网关&#34;&gt;API网关
&lt;/h4&gt;&lt;p&gt;在微服务架构中，Nginx可以作为所有API请求的统一入口，执行如身份验证、速率限制、日志记录、服务发现等通用功能&lt;/p&gt;
&lt;h2 id=&#34;目录结构&#34;&gt;目录结构
&lt;/h2&gt;&lt;p&gt;以国内Docker镜像源的&lt;code&gt;nginx:latest&lt;/code&gt;为例（没用过看这里：&lt;a class=&#34;link&#34; href=&#34;http://blog.928330.xyz/p/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bdocker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;快速上手Docker
    
    &lt;span style=&#34;white-space: nowrap;&#34;&gt;&lt;svg width=&#34;.7em&#34;
        height=&#34;.7em&#34; viewBox=&#34;0 0 21 21&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
        &lt;path d=&#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&#34; fill=&#34;currentColor&#34; /&gt;
        &lt;path d=&#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&#34;
            fill=&#34;currentColor&#34;&gt;
    &lt;/svg&gt;&lt;/span&gt;
    
&lt;/a&gt;），容器内的目录结构通常如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;/&lt;/span&gt;                                                  &lt;span style=&#34;color:#7f848e&#34;&gt;# 根目录
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;├──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;etc/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;nginx/&lt;/span&gt;                            &lt;span style=&#34;color:#7f848e&#34;&gt;# 配置文件目录
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#98c379&#34;&gt;├──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;nginx.conf&lt;/span&gt;                  &lt;span style=&#34;color:#7f848e&#34;&gt;# 主配置文件（Nginx 的核心配置）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#98c379&#34;&gt;├──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;mime.types&lt;/span&gt;                &lt;span style=&#34;color:#7f848e&#34;&gt;# MIME类型映射表
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;conf.d/&lt;/span&gt;                       &lt;span style=&#34;color:#7f848e&#34;&gt;# 子配置目录（用于虚拟主机）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;           &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;default.conf&lt;/span&gt;           &lt;span style=&#34;color:#7f848e&#34;&gt;# 默认网站配置文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;├──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;usr/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;share/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;nginx/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;           &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;html/&lt;/span&gt;                     &lt;span style=&#34;color:#7f848e&#34;&gt;# 默认的 Web 根目录
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;               &lt;span style=&#34;color:#98c379&#34;&gt;├──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;index.html&lt;/span&gt;         &lt;span style=&#34;color:#7f848e&#34;&gt;# 默认欢迎页面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;               &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;50x.html&lt;/span&gt;            &lt;span style=&#34;color:#7f848e&#34;&gt;# 服务器错误页面（如 500、502）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;├──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;var/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;   &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;log/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;       &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;nginx/&lt;/span&gt;                       &lt;span style=&#34;color:#7f848e&#34;&gt;# 日志文件目录（部分精简镜像无日志输出）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;           &lt;span style=&#34;color:#98c379&#34;&gt;├──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;access.log&lt;/span&gt;             &lt;span style=&#34;color:#7f848e&#34;&gt;# 访问日志（默认可能未启用）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;           &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;error.log&lt;/span&gt;                &lt;span style=&#34;color:#7f848e&#34;&gt;# 错误日志（默认可能未启用）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;│&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;usr/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;sbin/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;nginx&lt;/span&gt;                          &lt;span style=&#34;color:#7f848e&#34;&gt;# 主程序二进制文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要注意以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#34;color:red;font-size:20px&#34;&gt;&lt;strong&gt;日志默认输出到标准输出/错误（stdout/stderr），而不是文件中&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在编译安装的传统方式中，Nginx日志会记录在：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;usr&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;local&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;nginx&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;logs&lt;/span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;而在Docker官方镜像中，日志默认不写入文件，而是输出到标准输出（stdout）和标准错误（stderr）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看日志的方式&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker logs &amp;lt;容器ID&amp;gt;/&amp;lt;名称&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#34;color:red;font-size:20px&#34;&gt;&lt;strong&gt;&lt;code&gt;/etc/nginx/conf.d/&lt;/code&gt;是主配置目录，&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;是主配置文件&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在Docker镜像中，Nginx的主配置文件仍然是&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但在这个文件中有这样一行代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;include&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;/etc/nginx/conf.d/*.conf&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;include&lt;/code&gt;是Nginx配置语言中的指令，用于包含其他配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也就是说，&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;默认会包含&lt;code&gt;/etc/nginx/conf.d/&lt;/code&gt;这个子目录中的所有配置（.conf）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常用命令&#34;&gt;常用命令
&lt;/h2&gt;&lt;h3 id=&#34;查看版本&#34;&gt;查看版本
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx -v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出当前安装的 Nginx 版本号，用于确认是否正确安装Nginx及其版本信息&lt;/p&gt;
&lt;h3 id=&#34;检查配置文件语法&#34;&gt;检查配置文件语法
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx -t
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是极其重要的安全步骤。在每次修改配置文件后&lt;strong&gt;必须执行&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主进程会 fork 一个临时子进程&lt;/li&gt;
&lt;li&gt;子进程尝试解析所有配置文件，但不会绑定端口或真正启动服务&lt;/li&gt;
&lt;li&gt;若语法无误，会提示&lt;code&gt;syntax is ok&lt;/code&gt;和 &lt;code&gt;test is successful&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若有错误，会明确指出是哪一行、哪个文件配置有误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250724132842292.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250724132842292&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;重新加载配置文件&#34;&gt;重新加载配置文件
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx -s reload
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;强制停止&#34;&gt;强制停止
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nginx -s stop
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置文件&#34;&gt;配置文件
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Nginx的所有功能都是通过配置文件&lt;code&gt;nginx.conf&lt;/code&gt;来驱动的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该文件主要由多个配置块组成，这些块由花括号&lt;code&gt;{}&lt;/code&gt;界定，可以嵌套，形成了层级分明的结构&lt;/p&gt;
&lt;p&gt;一个典型的&lt;code&gt;nginx.conf&lt;/code&gt;结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;nginx.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;├──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;全局块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;├──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;events块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;http块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;server块（可多个）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#98c379&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;location块（可多个）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;具体示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;user&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;nginx&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;worker_processes&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;auto&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;error_log&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;/var/log/nginx/error.log&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;warn&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;pid&lt;/span&gt;        &lt;span style=&#34;color:#98c379&#34;&gt;/var/run/nginx.pid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;events&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;worker_connections&lt;/span&gt;  &lt;span style=&#34;color:#d19a66&#34;&gt;1024&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;http&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;include&lt;/span&gt;       &lt;span style=&#34;color:#98c379&#34;&gt;/etc/nginx/mime.types&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;default_type&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;application/octet-stream&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;log_format&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;main&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$remote_addr&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$remote_user&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$time_local]&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$request&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$status&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$body_bytes_sent&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$http_referer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$http_user_agent&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$http_x_forwarded_for&amp;#34;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;access_log&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;/var/log/nginx/access.log&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;main&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;sendfile&lt;/span&gt;        &lt;span style=&#34;color:#e06c75&#34;&gt;on&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;tcp_nopush&lt;/span&gt;      &lt;span style=&#34;color:#e06c75&#34;&gt;on&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;keepalive_timeout&lt;/span&gt;  &lt;span style=&#34;color:#d19a66&#34;&gt;65&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt;       &lt;span style=&#34;color:#d19a66&#34;&gt;80&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;server_name&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;localhost&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c678dd&#34;&gt;root&lt;/span&gt;   &lt;span style=&#34;color:#98c379&#34;&gt;/usr/share/nginx/html&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#c678dd&#34;&gt;index&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;index.html&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;index.htm&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;全局块&#34;&gt;全局块
&lt;/h3&gt;&lt;p&gt;位于配置文件顶部，未嵌套于任何块中&lt;/p&gt;
&lt;p&gt;用于配置Nginx整体运行环境，影响所有子模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;user&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;nginx&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;worker_processes&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;auto&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;error_log&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;/var/log/nginx/error.log&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;warn&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;pid&lt;/span&gt;        &lt;span style=&#34;color:#98c379&#34;&gt;/var/run/nginx.pid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;user&lt;/code&gt;：指定运行工作进程的用户和用户组&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;worker_processes&lt;/code&gt;：指定工作进程数量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;auto&lt;/code&gt;表示自动与 CPU 核心数一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;error_log&lt;/code&gt;：设置错误日志的路径和日志级别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nginx支持的日志级别（从高到低）如下：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;级别&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;记录所有信息，主要用于开发或调试，信息量极大。通常需编译时启用&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;info&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;普通信息，如配置加载成功、进程启动、连接创建等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;notice&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;正常但重要的事件，如配置文件重载、进程关闭等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;warn&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;警告信息，非致命错误，比如配置中存在问题但可以忽略或继续运行&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;error&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;运行过程中出现的错误，如连接失败、服务不可达等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;crit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;严重错误，Nginx可能无法继续运行&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;alert&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;必须立刻处理的严重问题&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;emerg&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;紧急状态，比如系统崩溃，Nginx无法启动&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;pid&lt;/code&gt;：指定记录主进程PID的文件路径&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;events块&#34;&gt;events块
&lt;/h3&gt;&lt;p&gt;紧随全局块之后，一级块&lt;/p&gt;
&lt;p&gt;用于配置与网络连接处理相关的指令，影响工作进程的并发性能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;events&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;worker_connections&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1024&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;worker_connections&lt;/code&gt;：每个工作进程可同时处理的最大连接数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;总并发连接数约为&lt;code&gt;worker_processes * worker_connections&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http块&#34;&gt;http块
&lt;/h3&gt;&lt;p&gt;紧随events块之后，一级块&lt;/p&gt;
&lt;p&gt;用于配置HTTP协议相关的指令，是配置Web服务的核心部分&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;http&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;include&lt;/span&gt;       &lt;span style=&#34;color:#98c379&#34;&gt;/etc/nginx/mime.types&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;default_type&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;application/octet-stream&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;log_format&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;main&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$remote_addr&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$remote_user&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$time_local]&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$request&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$status&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$body_bytes_sent&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$http_referer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$http_user_agent&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$http_x_forwarded_for&amp;#34;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;access_log&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;/var/log/nginx/access.log&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;main&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;sendfile&lt;/span&gt;        &lt;span style=&#34;color:#e06c75&#34;&gt;on&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;tcp_nopush&lt;/span&gt;      &lt;span style=&#34;color:#e06c75&#34;&gt;on&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;keepalive_timeout&lt;/span&gt;  &lt;span style=&#34;color:#d19a66&#34;&gt;65&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;include&lt;/code&gt;：引入外部文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这里&lt;code&gt;/etc/nginx/mime.types&lt;/code&gt;用于MIME类型配置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;default_type&lt;/code&gt;：未明确 MIME 类型时的默认类型&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;log_format&lt;/code&gt;：定义日志格式&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;access_log&lt;/code&gt;：指定访问日志的输出路径及格式&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;sendfile&lt;/code&gt;：启用高效文件传输方式&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;tcp_nopush&lt;/code&gt;：优化网络传输性能，避免频繁发送小包&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;keepalive_timeout&lt;/code&gt;：设置长连接超时时间&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;server块&#34;&gt;server块
&lt;/h3&gt;&lt;p&gt;嵌套于http块内部，二级块，可存在多个，用于配置多个虚拟主机&lt;/p&gt;
&lt;p&gt;用于定义单个虚拟主机的配置，通过监听端口和服务器名称对请求进行分发&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;80&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server_name&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;localhost&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;listen&lt;/code&gt;：设置监听的端口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只有访问主机该端口的请求才会被接受&lt;/p&gt;
&lt;p&gt;基本用法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;lt;地址&amp;gt;:&amp;lt;端口&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;[参数]&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;地址&lt;/code&gt;&lt;/strong&gt;（可选）：指定绑定的 IP（默认是所有IP）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;端口&lt;/code&gt;&lt;/strong&gt;：监听的端口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;参数&lt;/code&gt;&lt;/strong&gt;（可选）：例如&lt;code&gt;default_server&lt;/code&gt;、&lt;code&gt;ssl&lt;/code&gt;、&lt;code&gt;http2&lt;/code&gt; 等（我们后面都会提到）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有一个比较特殊的参数：&lt;code&gt;default_server&lt;/code&gt;，用来指定默认的server块，当Nginx收到请求但找不到任何&lt;code&gt;server_name&lt;/code&gt;匹配时，就会使用这个默认配置来处理请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:yellow;&#34;&gt;&lt;strong&gt;介绍几种常见&lt;code&gt;listen&lt;/code&gt;字段写法：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;80&lt;/code&gt;：监听所有IP的80端口（80是默认HTTP端口），相当于&lt;code&gt;0.0.0.0:8080&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;127.0.0.1:8080&lt;/code&gt;：仅监听本地回环地址的8080端口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[::]:80&lt;/code&gt;：IPv6地址监听80端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;server_name&lt;/code&gt;：匹配请求的主机名或域名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只有请求头中的Host字段符合，Nginx才会把请求交给这个&lt;code&gt;server&lt;/code&gt;块处理&lt;/p&gt;
&lt;p&gt;可以在&lt;code&gt;server_name&lt;/code&gt;中写多个值，也支持通配符&lt;code&gt;*&lt;/code&gt;，也可以使用&lt;code&gt;_&lt;/code&gt;表示任何Host值&lt;/p&gt;
&lt;p&gt;如果不写这个字段，http块又只有一个server，那么这个server块会所有请求都匹配（包括 IP）&lt;/p&gt;
&lt;p&gt;如果不写这个字段，http块又有多个server，那么这个server块会作为默认server，处理未匹配的请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;location块&#34;&gt;location块
&lt;/h3&gt;&lt;p&gt;嵌套于server块内部，三级块&lt;/p&gt;
&lt;p&gt;用于对URI（注意不是URL）进行匹配，制定请求的处理方式，如资源路径、代理规则等&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;root&lt;/span&gt;   &lt;span style=&#34;color:#98c379&#34;&gt;/usr/share/nginx/html&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;index&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;index.html&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;index.htm&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;location&lt;/code&gt;：用于匹配客户端请求的URI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;示例这里是匹配以&lt;code&gt;/&lt;/code&gt;开头的URI（实际上就是匹配所有请求，因为URI就是以&lt;code&gt;/&lt;/code&gt;开头的）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此外，Nginx提供多种匹配方式，优先级不同：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;语法&lt;/th&gt;
          &lt;th&gt;示例&lt;/th&gt;
          &lt;th&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;精确匹配&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;location = /login {}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;仅匹配 URI 等于 &lt;code&gt;/login&lt;/code&gt; 的请求&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;前缀匹配&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;location /images/ {}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;匹配以 &lt;code&gt;/images/&lt;/code&gt; 开头的 URI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;正则匹配&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;~&lt;/code&gt;（区分大小写）&lt;br /&gt;&lt;code&gt;~*&lt;/code&gt;（不区分大小写）&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;location ~ \.php$ {}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;使用正则表达式匹配 URI&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;优先匹配&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;^~&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;location ^~ /static/ {}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;前缀匹配优先于正则匹配&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;root&lt;/code&gt;：设置请求资源的根目录路径&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当一个请求到达时，Nginx会将请求的 URI 拼接到这个路径后面，以确定文件的具体位置&lt;/p&gt;
&lt;p&gt;如果客户端访问&lt;code&gt;/index.html&lt;/code&gt;，那么实际访问的是服务器上的&lt;code&gt;/var/www/html/index.html&lt;/code&gt;文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;index&lt;/code&gt;：指定访问目录时的默认文件名称&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果用户访问的是目录而不是具体文件，Nginx会在&lt;code&gt;/usr/share/nginx/html/&lt;/code&gt;目录下按顺序查找：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.htm&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只要找到其中一个文件，就立即返回该文件作为响应；如果都找不到，会返回 403（禁止访问）或 404（未找到），视配置而定&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;root&lt;/code&gt;和&lt;code&gt;index&lt;/code&gt;也可以直接写在server块里面，作为所有location块的默认值&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:yellow;font-size:18px&#34;&gt;&lt;strong&gt;说了这么多，我们最后总结一下&lt;code&gt;listen&lt;/code&gt;、&lt;code&gt;server_name&lt;/code&gt;、&lt;code&gt;location&lt;/code&gt; 三者是如何配合工作的：&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;用户访问浏览器输入：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-url&#34; data-lang=&#34;url&#34;&gt;http://localhost/images/logo.png
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Nginx内部处理流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;看端口：&lt;/strong&gt;
该请求是发给哪个端口，是80，那就匹配所有listen 80的server&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;看Host头：&lt;/strong&gt;
Host是localhost，找哪个server_name匹配上了，进入该server块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;看URI：&lt;/strong&gt;
URI是/images/logo.png，在这个server中找哪个location匹配得最好，执行该location的规则&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;核心功能--web服务&#34;&gt;核心功能 —— Web服务
&lt;/h2&gt;&lt;p&gt;Web 服务是 Nginx 最基础，也是最核心的功能，它能够高效地处理客户端对静态资源的请求&lt;/p&gt;
&lt;p&gt;这主要通过&lt;code&gt;server&lt;/code&gt;块中的&lt;code&gt;root&lt;/code&gt;、&lt;code&gt;index&lt;/code&gt;、&lt;code&gt;location&lt;/code&gt;来协同完成&lt;/p&gt;
&lt;h3 id=&#34;部署静态资源&#34;&gt;部署静态资源
&lt;/h3&gt;&lt;p&gt;可以把Nginx作为静态资源服务器，当用户请求时，Nginx从服务器的指定文件路径中查找并返回对应的文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;80&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/var/www/my-project/public&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;index.html&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;index.htm&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;try_files&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$uri&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$uri/&lt;/span&gt; =&lt;span style=&#34;color:#d19a66&#34;&gt;404&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;location&lt;/span&gt; ~&lt;span style=&#34;color:#98c379&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;\.(jpg|jpeg|gif|png|css|js|ico|webp)&lt;/span&gt;$ {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;expires&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;30d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;try_files $uri $uri/ =404&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一个非常强大的指令，常用于处理单页应用（SPA）的路由，它的工作原理是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;$uri&lt;/code&gt;：尝试将URI直接作为文件名进行查找&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$uri/&lt;/code&gt;：如果上一步失败，则尝试将URI作为一个目录名，并在该目录下查找由&lt;code&gt;index&lt;/code&gt;指令定义的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=404&lt;/code&gt;：如果前两步都失败，则返回一个404 Not Found错误&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;location ~* \.(jpg|jpeg|gif|png|css|js|ico|webp)$&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是一个正则匹配，&lt;code&gt;~*&lt;/code&gt;表示不区分大小写的正则，它会匹配所有以上述后缀结尾的请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;expires 30d&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用于设置HTTP响应头中的&lt;code&gt;Expires&lt;/code&gt;和&lt;code&gt;Cache-Control&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;告诉客户端浏览器可以将这些静态资源缓存30天，从而减少不必要的请求，提升后续访问速度&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置https服务&#34;&gt;配置HTTPS服务
&lt;/h3&gt;&lt;p&gt;为网站启用HTTPS可以对客户端和服务器之间的传输数据进行加密，确保数据安全&lt;/p&gt;
&lt;p&gt;配置前，我们需要从证书颁发机构（CA）获取SSL/TLS证书文件和私钥文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Nginx&#34; data-lang=&#34;Nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;443&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;ssl&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;http2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;yourdomain.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;ssl_certificate&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/path/to/fullchain.pem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;ssl_certificate_key&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/path/to/privkey.pem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;ssl_session_cache&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;shared:SSL:10m&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;ssl_session_timeout&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;10m&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;ssl_protocols&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;TLSv1.2&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;TLSv1.3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;ssl_ciphers&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#39;TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;off&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/var/www/my-project/public&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;index.html&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;try_files&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$uri&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$uri/&lt;/span&gt; =&lt;span style=&#34;color:#d19a66&#34;&gt;404&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;80&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;yourdomain.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;301&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;https://&lt;/span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;$server_name$request_uri&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;listen 443 ssl http2&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;443&lt;/code&gt;是HTTPS的标准端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ssl&lt;/code&gt;参数表示在此端口上启用SSL/TLS加密&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;http2&lt;/code&gt;参数表示同时启用HTTP/2协议，它可以显著提升页面加载性能&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ssl_certificate&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指定证书文件的路径，这通常是&lt;code&gt;.pem&lt;/code&gt;或&lt;code&gt;.crt&lt;/code&gt;格式的公钥证书链文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ssl_certificate_key&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指定与证书配对的私钥文件的路径，通常是&lt;code&gt;.key&lt;/code&gt;格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ssl_session_cache&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开启SSL会话缓存，用于复用TLS握手过程，提升性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ssl_session_timeout&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置SSL会话的有效时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ssl_protocols TLSv1.2 TLSv1.3&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指定只使用安全的TLS协议版本，废弃老旧且不安全的SSLv3, TLSv1.0, TLSv1.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ssl_ciphers&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指定加密时使用的加密套件列表，配置安全的套件可以防止降级攻击&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ssl_prefer_server_ciphers&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;是否优先使用服务器端指定的加密套件，&lt;code&gt;off&lt;/code&gt;表示客户端优先&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;return 301 https://$server_name$request_uri&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return 301&lt;/code&gt;表示发送一个永久重定向的HTTP状态码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$server_name&lt;/code&gt;和&lt;code&gt;$request_uri&lt;/code&gt;是Nginx变量，分别代表当前请求的域名和完整的 URI（包含参数）&lt;/p&gt;
&lt;p&gt;这能确保用户访问任何HTTP页面时都能被准确地重定向到对应的HTTPS版本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;核心功能--反向代理&#34;&gt;核心功能 —— 反向代理
&lt;/h2&gt;&lt;p&gt;反向代理是Nginx的一个核心功能&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nginx作为一个中间层，接收客户端的请求，再将请求转发给后端服务器处理，然后将响应返回给客户端&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种方式的好处包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以隐藏后端服务器的真实地址和结构&lt;/li&gt;
&lt;li&gt;可以统一对外的入口，便于安全控制和运维管理&lt;/li&gt;
&lt;li&gt;可以实现负载均衡、高可用等复杂功能（后续再讲）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个最简单的Nginx配置示例，只实现把请求转发到后端服务器的功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;80&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;www.example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;http://127.0.0.1:3000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;proxy_pass http://127.0.0.1:3000;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red;&#34;&gt;&lt;strong&gt;这是反向代理的核心语句，即将匹配到的请求转发到本机的3000端口，由本地某个服务来实际处理请求&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认情况下，Nginx把请求转发给后端时，不会携带原始客户端的信息&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:yellow;&#34;&gt;&lt;strong&gt;如果后端服务要获取用户的真实IP、请求协议、原始域名等信息，就需要使用&lt;code&gt;proxy_set_header&lt;/code&gt;来手动设置&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;80&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;www.example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;http://127.0.0.1:3000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;Host&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$host&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;X-Real-IP&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$remote_addr&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;X-Forwarded-For&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$scheme&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些&lt;code&gt;proxy_set_header&lt;/code&gt;是给后端应用用的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Host $host&lt;/code&gt;&lt;/strong&gt;：原始请求中的主机名&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;X-Real-IP $remote_addr&lt;/code&gt;&lt;/strong&gt;：客户端的真实 IP&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;X-Forwarded-For $proxy_add_x_forwarded_for&lt;/code&gt;&lt;/strong&gt;：经过的所有代理 IP 列表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;X-Forwarded-Proto $scheme&lt;/code&gt;&lt;/strong&gt;：原始请求的协议（http 或 https）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:yellow;&#34;&gt;&lt;strong&gt;如果我们有多个后端服务（比如多个进程、多个机器），可以用&lt;code&gt;upstream&lt;/code&gt;来统一管理后端服务器组&lt;/strong&gt;：&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;127.0.0.1&lt;/span&gt;:&lt;span style=&#34;color:#d19a66&#34;&gt;3000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#7f848e&#34;&gt;# server 127.0.0.1:3001;     #可以添加多个
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;80&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;www.example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;http://backend&lt;/span&gt;;   &lt;span style=&#34;color:#7f848e&#34;&gt;#&amp;lt;--这里不一样了，使用的是upstream
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#7f848e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;Host&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$host&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;X-Real-IP&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$remote_addr&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;X-Forwarded-For&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;$scheme&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，我们只需要在&lt;code&gt;proxy_pass&lt;/code&gt;中写 &lt;code&gt;http://backend&lt;/code&gt;即可&lt;/p&gt;
&lt;p&gt;具体的地址都集中写在&lt;code&gt;upstream backend&lt;/code&gt;块中，方便管理和负载均衡&lt;/p&gt;
&lt;h2 id=&#34;核心功能--负载均衡&#34;&gt;核心功能 —— 负载均衡
&lt;/h2&gt;&lt;p&gt;当&lt;code&gt;upstream&lt;/code&gt;块中定义了多台&lt;code&gt;server&lt;/code&gt;时，Nginx就自然地成为了一个负载均衡器&lt;/p&gt;
&lt;p&gt;它会根据指定的策略将请求分发到不同的服务器，以分担流量压力&lt;/p&gt;
&lt;h3 id=&#34;http负载均衡配置&#34;&gt;HTTP负载均衡配置
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Nginx&#34; data-lang=&#34;Nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend_cluster&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend1.example.com&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;weight=5&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend2.example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend3.example.com&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backup&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend4.example.com&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;down&lt;/span&gt;;   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;80&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;http://backend_cluster&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_connect_timeout&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;5s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_read_timeout&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;10s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;weight=5&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为服务器设置权重，在默认的轮询策略下，权重越高的服务器接收到的请求比例就越高&lt;/p&gt;
&lt;p&gt;这里&lt;code&gt;backend1&lt;/code&gt;的请求量大约是&lt;code&gt;backend2&lt;/code&gt;的5倍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;backup&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将服务器标记为备用服务器&lt;/p&gt;
&lt;p&gt;只有当所有非备用的主服务器都无法访问时，Nginx才会将请求转发给它&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;down&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将服务器标记为永久下线，Nginx不会向它转发任何请求&lt;/p&gt;
&lt;p&gt;这通常用于服务器维护&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;proxy_connect_timeout&lt;/code&gt; &amp;amp; &lt;code&gt;proxy_read_timeout&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置Nginx与后端服务器建立连接的超时时间和读取响应的超时时间&lt;/p&gt;
&lt;p&gt;可以防止因个别后端服务响应缓慢而导致请求长时间挂起&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;负载均衡策略&#34;&gt;负载均衡策略
&lt;/h3&gt;&lt;h4 id=&#34;轮询&#34;&gt;轮询
&lt;/h4&gt;&lt;p&gt;默认策略，无需任何指令&lt;/p&gt;
&lt;p&gt;请求被按顺序、轮流分发到每台服务器，并考虑权重&lt;/p&gt;
&lt;h4 id=&#34;权重weight&#34;&gt;权重（weight）
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;就像我们之前提到过的例子，&lt;code&gt;weight&lt;/code&gt;越高，分配的请求越多&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此策略适合后端性能不一致的情况（强机多干活）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend_cluster&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;192.168.0.1&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;weight=3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;192.168.0.2&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;weight=1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上例中，第一个服务器将获得大约75%的请求，第二个约25%&lt;/p&gt;
&lt;h4 id=&#34;ip哈希ip_hash&#34;&gt;IP哈希（ip_hash）
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;根据客户端IP地址的哈希值来选择服务器&lt;/strong&gt;，这能确保来自同一个客户端的请求始终被定向到同一台后端服务器&lt;/p&gt;
&lt;p&gt;此策略对于需要保持用户会话状态的应用非常重要&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Nginx&#34; data-lang=&#34;Nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend_cluster&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;ip_hash&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend1.example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend2.example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;最少连接-least_conn&#34;&gt;最少连接 (least_conn)
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;将新请求发送到当前活动连接数最少的服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此策略在处理耗时不同或长连接较多的请求时，能使负载分布得更加均匀&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Nginx&#34; data-lang=&#34;Nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend_cluster&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;least_conn&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend1.example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;backend2.example.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;核心功能--tcpudp代理&#34;&gt;核心功能 —— TCP/UDP代理
&lt;/h2&gt;&lt;p&gt;Nginx不仅能代理HTTP，还能通过&lt;code&gt;stream&lt;/code&gt;模块在更底层的传输层（TCP/UDP）进行代理&lt;/p&gt;
&lt;p&gt;例如代理数据库连接、游戏服务器、DNS 查询等&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stream&lt;/code&gt;块必须配置在&lt;code&gt;http&lt;/code&gt;块之外，位于主配置文件的顶层，和&lt;code&gt;http&lt;/code&gt;是平级的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Nginx&#34; data-lang=&#34;Nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;stream&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;upstream&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;mysql_cluster&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;192.168.1.101&lt;/span&gt;:&lt;span style=&#34;color:#d19a66&#34;&gt;3306&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;weight=2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;192.168.1.102&lt;/span&gt;:&lt;span style=&#34;color:#d19a66&#34;&gt;3306&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;3307&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;mysql_cluster&lt;/span&gt;; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_timeout&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;20s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;53&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;udp&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c678dd&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#e06c75&#34;&gt;8.8.8.8&lt;/span&gt;:&lt;span style=&#34;color:#d19a66&#34;&gt;53&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以看到，stream块和http块的写法基本上是一样的，但是细节上还是有些不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;stream&lt;/code&gt;块不支持&lt;code&gt;location&lt;/code&gt;，没有路径匹配&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;stream&lt;/code&gt;块不解析协议内容，没有&lt;code&gt;proxy_set_header&lt;/code&gt;，只转发原始TCP/UDP数据流&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;stream&lt;/code&gt;块不支持&lt;code&gt;ip_hash&lt;/code&gt;的负载均衡策略&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>快速上手docker</title>
        <link>https://blog.928330.xyz/p/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bdocker/</link>
        <pubDate>Wed, 23 Jul 2025 19:24:02 +0800</pubDate>
        
        <guid>https://blog.928330.xyz/p/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8Bdocker/</guid>
        <description>&lt;p&gt;&lt;span style=&#34;color:aqua;font-size:20px&#34;&gt;本教程针对的是linux环境下的docker&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;docker简介&#34;&gt;Docker简介
&lt;/h1&gt;&lt;h2 id=&#34;什么是docker&#34;&gt;什么是Docker
&lt;/h2&gt;&lt;p&gt;Docker是一个开源的容器化平台，旨在简化应用程序的开发、交付和运行&lt;/p&gt;
&lt;p&gt;它允许开发者将应用程序及其所有依赖项打包到一个轻量级的、可移植的容器中，从而确保在不同环境中都能一致地运行&lt;/p&gt;
&lt;p&gt;容器之间是隔离的，像一个个小型的沙箱&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一句话&lt;/strong&gt;：Docker就像一个轻量级虚拟机，可以在不同的环境中快速部署运行同样的应用程序&lt;/p&gt;
&lt;h2 id=&#34;docker的主要概念&#34;&gt;Docker的主要概念
&lt;/h2&gt;&lt;h3 id=&#34;容器container&#34;&gt;容器（Container）
&lt;/h3&gt;&lt;p&gt;容器是Docker的核心，&lt;strong&gt;它就像是一个隔离的小程序环境，打包了应用运行所需的一切&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与传统虚拟机相比，容器不需要包含整个操作系统，只共享宿主机内核，因此占用资源小、启动速度快&lt;/p&gt;
&lt;p&gt;无论在本地、测试环境，还是部署到服务器，运行结果都一致&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每个容器互相隔离，修改不会影响宿主机或其他容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如，运行一个Python应用的容器，就像在一个只包含Python的迷你Linux系统里运行它&lt;/p&gt;
&lt;h3 id=&#34;镜像image&#34;&gt;镜像（Image）
&lt;/h3&gt;&lt;p&gt;镜像是构建容器的模板或快照，可以理解为包含了&lt;strong&gt;系统环境+应用程序代码+配置&lt;/strong&gt;的“包”&lt;/p&gt;
&lt;p&gt;镜像一经创建就不变，部署更可靠&lt;/p&gt;
&lt;p&gt;比如我们下载&lt;code&gt;nginx&lt;/code&gt;这个镜像，然后就能启动一个&lt;code&gt;nginx&lt;/code&gt;容器，&lt;strong&gt;就像虚拟机的快照和启动运行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;即使我们更改了容器，镜像也不会改变，我们也可以把改动的容器制作为新的镜像，类似拍摄快照&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个镜像可以启动成多个容器，就像一个类能被实例化成多个对象&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;dockerfile&#34;&gt;Dockerfile
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;它是用来构建镜像的配置脚本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;里面写入了构建命令，如基于哪个镜像、复制哪些文件、安装哪些软件等&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;docker build&lt;/code&gt;命令可以将&lt;code&gt;Dockerfile&lt;/code&gt;构建成镜像，然后启动对应的容器&lt;/p&gt;
&lt;h3 id=&#34;仓库registry&#34;&gt;仓库（Registry）
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;存储和分发镜像的平台&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如DockerHub，就是Docker官方提供的镜像仓库平台（类似GitHub），有很多官方镜像可以免费下载&lt;/p&gt;
&lt;h1 id=&#34;systemctl命令使用&#34;&gt;systemctl命令使用
&lt;/h1&gt;&lt;p&gt;&lt;code&gt;systemctl&lt;/code&gt;是现代Linux发行版中核心的系统和服务管理器&lt;/p&gt;
&lt;p&gt;它负责启动、停止、检查和管理系统上的各种后台服务（也称为守护进程）&lt;/p&gt;
&lt;p&gt;在使用任何Docker命令之前，必须确保Docker的后台服务正在运行&lt;/p&gt;
&lt;p&gt;接下来我们将以Docker服务为例结合介绍它的各种命令&lt;/p&gt;
&lt;h2 id=&#34;服务的生命周期管理&#34;&gt;服务的生命周期管理
&lt;/h2&gt;&lt;p&gt;这是 &lt;code&gt;systemctl&lt;/code&gt;最核心的功能，用于控制一个服务的运行、停止和重启等&lt;/p&gt;
&lt;h3 id=&#34;启动服务&#34;&gt;启动服务
&lt;/h3&gt;&lt;p&gt;当一个服务处于停止状态时，使用&lt;code&gt;start&lt;/code&gt;命令来启动它&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start 服务名称
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl start docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令会启动Docker服务，Docker守护进程会在后台开始运行，准备接收和处理Docker相关的命令&lt;/p&gt;
&lt;p&gt;通常执行此类操作需要管理员权限&lt;/p&gt;
&lt;h3 id=&#34;停止服务&#34;&gt;停止服务
&lt;/h3&gt;&lt;p&gt;停止一个正在运行的服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl stop 服务名称
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl stop docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令会向Docker服务发送停止信号，使其安全地终止&lt;/p&gt;
&lt;p&gt;对于Docker来说，这意味着Docker守护进程会关闭，所有通过该守护进程运行的容器也会停止&lt;/p&gt;
&lt;h3 id=&#34;重启服务&#34;&gt;重启服务
&lt;/h3&gt;&lt;p&gt;这是一个便捷的组合命令，相当于先停止服务再立即启动它&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这在修改了服务的配置文件后，需要让新配置生效时非常有用&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl restart 服务名称
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl restart docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果修改了Docker的配置文件（例如 &lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;），执行此命令会重启 Docker 服务，使其加载并应用新的配置&lt;/p&gt;
&lt;h3 id=&#34;重新加载服务配置&#34;&gt;重新加载服务配置
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在不中断服务的情况下，重新加载其配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl reload 服务名称
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl reload docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个命令比&lt;code&gt;restart&lt;/code&gt;更为温和，它会请求服务重新读取其配置文件，而不会终止正在运行的主进程&lt;/p&gt;
&lt;p&gt;但是，并非所有服务都支持&lt;code&gt;reload&lt;/code&gt;操作，如果服务不支持此操作，&lt;code&gt;systemctl&lt;/code&gt;可能会转而执行&lt;code&gt;restart&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker服务通常建议使用&lt;code&gt;restart&lt;/code&gt;而不是&lt;code&gt;reload&lt;/code&gt;来应用配置更改&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;服务的状态与信息查看&#34;&gt;服务的状态与信息查看
&lt;/h2&gt;&lt;h3 id=&#34;查看服务详细状态&#34;&gt;查看服务详细状态
&lt;/h3&gt;&lt;p&gt;获取一个服务的全面信息，包括它是否正在运行、最近的日志、进程ID (PID) 等&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl status 服务名称
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl status docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是排查服务问题的首选&lt;/p&gt;
&lt;p&gt;它会清晰地显示服务的&lt;code&gt;active&lt;/code&gt;状态，如 &lt;code&gt;active (running)&lt;/code&gt; 或 &lt;code&gt;inactive (dead)&lt;/code&gt;），并附带最近几条相关的日志记录&lt;/p&gt;
&lt;h3 id=&#34;检查服务是否正在运行&#34;&gt;检查服务是否正在运行
&lt;/h3&gt;&lt;p&gt;快速检查一个服务当前是否处于活动状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl is-active 服务名称
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl is-active docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令的返回值非常简洁：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果服务正在运行，它会输出&lt;code&gt;active&lt;/code&gt;并返回状态码 0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果服务未运行，它会输出&lt;code&gt;inactive&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这在编写自动化脚本时很有用，可以根据返回值来判断是否需要执行某些操作&lt;/p&gt;
&lt;h2 id=&#34;服务的开机自启动管理&#34;&gt;服务的开机自启动管理
&lt;/h2&gt;&lt;h3 id=&#34;设置开机自启动&#34;&gt;设置开机自启动
&lt;/h3&gt;&lt;p&gt;将一个服务设置为在系统启动时自动运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl &lt;span style=&#34;color:#e5c07b&#34;&gt;enable&lt;/span&gt; 服务名称
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl &lt;span style=&#34;color:#e5c07b&#34;&gt;enable&lt;/span&gt; docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行此命令后，&lt;code&gt;systemd&lt;/code&gt;会创建必要的符号链接，确保下次系统启动时，Docker服务会自动启动&lt;/p&gt;
&lt;p&gt;这是一个一次性的设置，之后无需再手动启动&lt;/p&gt;
&lt;h3 id=&#34;禁止开机自启动&#34;&gt;禁止开机自启动
&lt;/h3&gt;&lt;p&gt;取消一个服务的开机自启动设置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl disable 服务名称
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl disable docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令会移除&lt;code&gt;enable&lt;/code&gt;命令创建的符号链接，下次系统重启后，Docker服务将不会自动运行&lt;/p&gt;
&lt;p&gt;这并不会影响当前正在运行的服务状态&lt;/p&gt;
&lt;h3 id=&#34;检查服务是否开机自启动&#34;&gt;检查服务是否开机自启动
&lt;/h3&gt;&lt;p&gt;查看一个服务当前是否被设置为开机自启动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl is-enabled 服务名称
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl is-enabled docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令会返回 &lt;code&gt;enabled&lt;/code&gt; (已设置) 或 &lt;code&gt;disabled&lt;/code&gt; (未设置)&lt;/p&gt;
&lt;h1 id=&#34;docker更改源&#34;&gt;Docker更改源
&lt;/h1&gt;&lt;p&gt;不知道为什么国内忽然无法访问官方的镜像仓库了，为了加快Docker镜像的下载速度，我们通常需要将 Docker的默认源&lt;code&gt;registry.docker.io&lt;/code&gt;更换为国内的镜像加速源&lt;/p&gt;
&lt;h2 id=&#34;检查安装状态&#34;&gt;检查安装状态
&lt;/h2&gt;&lt;p&gt;首先要确认你的系统已正确安装了Docker，可以执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;返回的是docker版本，确认无误后继续&lt;/p&gt;
&lt;h2 id=&#34;编辑配置文件&#34;&gt;编辑配置文件
&lt;/h2&gt;&lt;p&gt;Docker 的镜像源配置文件通常位于&lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;，如果文件不存在，可以手动创建&lt;/p&gt;
&lt;p&gt;使用任意文本编辑器打开，例如使用vim（不知道怎么使用vim的可以看一眼：&lt;a class=&#34;link&#34; href=&#34;http://blog.928330.xyz/p/vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;vim使用教程
    
    &lt;span style=&#34;white-space: nowrap;&#34;&gt;&lt;svg width=&#34;.7em&#34;
        height=&#34;.7em&#34; viewBox=&#34;0 0 21 21&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
        &lt;path d=&#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&#34; fill=&#34;currentColor&#34; /&gt;
        &lt;path d=&#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&#34;
            fill=&#34;currentColor&#34;&gt;
    &lt;/svg&gt;&lt;/span&gt;
    
&lt;/a&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim /etc/docker/daemon.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后将内容修改为以下格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e06c75&#34;&gt;&amp;#34;registry-mirrors&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    	&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;https://&amp;lt;加速地址1&amp;gt;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;https://&amp;lt;加速地址2&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然你还能添加更多加速地址，但是注意最后一个加速地址后面就不能有逗号了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b站up:大海资源&lt;/strong&gt;整理的当前可用的国内镜像源：https://www.dhzy.fun/archives/6852.html&lt;/p&gt;
&lt;h2 id=&#34;重启服务-1&#34;&gt;重启服务
&lt;/h2&gt;&lt;p&gt;修改完配置后，需要重启 Docker 服务以使配置生效：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;systemctl restart docker
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;验证是否生效&#34;&gt;验证是否生效
&lt;/h2&gt;&lt;p&gt;可以执行如下命令查看当前镜像加速器配置是否生效：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker info | grep -A &lt;span style=&#34;color:#d19a66&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Registry Mirrors&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从输出中查找包含&lt;code&gt;Registry Mirrors&lt;/code&gt;的那一行，并显示它后面10行&lt;/p&gt;
&lt;p&gt;如果是下面这样的输出，说明配置成功了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250722202433203.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250722202433203&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项
&lt;/h2&gt;&lt;p&gt;修改配置文件时要确保JSON格式正确，例如逗号不能多不能少&lt;/p&gt;
&lt;p&gt;有些加速源如阿里云需要登录账号并绑定使用，获取专属地址&lt;/p&gt;
&lt;p&gt;如果使用的是非systemd系统，要使用service命令重启Docker&lt;/p&gt;
&lt;h1 id=&#34;docker使用&#34;&gt;Docker使用
&lt;/h1&gt;&lt;h2 id=&#34;镜像管理&#34;&gt;镜像管理
&lt;/h2&gt;&lt;h3 id=&#34;查找镜像&#34;&gt;查找镜像
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker search &amp;lt;镜像名称&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;docker search&lt;/code&gt;使用的是DockerHub的HTTP API，没有镜像源概念，无法走国内加速&lt;/p&gt;
&lt;p&gt;如果无法访问，必须使用代理，或者通过别的方式访问官网：https://hub.docker.com/&lt;/p&gt;
&lt;h3 id=&#34;拉取镜像&#34;&gt;拉取镜像
&lt;/h3&gt;&lt;p&gt;从仓库中下载一个镜像到你的本地机器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker pull &amp;lt;镜像名称&amp;gt;:&amp;lt;标签&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;镜像名称&lt;/strong&gt;：想要下载的软件，例如&lt;code&gt;nginx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;标签&lt;/strong&gt; ：通常用来表示软件的版本，例如&lt;code&gt;latest&lt;/code&gt;表示最新版，&lt;code&gt;1.21&lt;/code&gt;表示特定版本&lt;/p&gt;
&lt;p&gt;​           如果省略标签，Docker 会默认使用&lt;code&gt;latest&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker pull nginx:latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令会从镜像源下载最新版本的Nginx镜像&lt;/p&gt;
&lt;h3 id=&#34;查看本地镜像&#34;&gt;查看本地镜像
&lt;/h3&gt;&lt;p&gt;列出所有已经下载到本地计算机上的镜像&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker images
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250722204915819.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250722204915819&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;REPOSITORY&lt;/strong&gt;：仓库名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TAG&lt;/strong&gt; ：标签&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IMAGE ID&lt;/strong&gt;：镜像的唯一ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CREATED&lt;/strong&gt;：创建时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SIZE&lt;/strong&gt;：镜像大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;保存更改的镜像&#34;&gt;保存更改的镜像
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker commit &lt;span style=&#34;color:#56b6c2&#34;&gt;[&lt;/span&gt;选项&lt;span style=&#34;color:#56b6c2&#34;&gt;]&lt;/span&gt; &amp;lt;容器ID&amp;gt;/&amp;lt;容器名称&amp;gt; &amp;lt;镜像名称&amp;gt;:&amp;lt;标签&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常用选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-m &amp;quot;提交信息&amp;quot;&lt;/code&gt;&lt;/strong&gt;：&lt;strong&gt;为此次操作添加描述性说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类似于 Git 的 commit message，便于记录修改内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-a &amp;quot;作者&amp;quot;&lt;/code&gt;&lt;/strong&gt;：&lt;strong&gt;指定作者信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方便追踪是谁进行了修改或创建操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker commit -m&lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;update&amp;#34;&lt;/span&gt; -a&lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;kakahuote&amp;#34;&lt;/span&gt; 8950b5741b30 mynginx:mod
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个命令会执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把名为&lt;code&gt;8950b5741b30&lt;/code&gt;的容器保存为一个新的镜像&lt;/li&gt;
&lt;li&gt;添加说明信息&lt;code&gt;&amp;quot;update&amp;quot;&lt;/code&gt;，记录镜像的更改内容&lt;/li&gt;
&lt;li&gt;指定作者为&lt;code&gt;kakahuote&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建一个名为&lt;code&gt;mynginx&lt;/code&gt;、标签为&lt;code&gt;mod&lt;/code&gt;的新镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723135839721.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723135839721&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;删除镜像&#34;&gt;删除镜像
&lt;/h3&gt;&lt;p&gt;当某个镜像不再需要时，可以将其从本地删除以释放磁盘空间&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker rmi &amp;lt;镜像ID&amp;gt;/&amp;lt;镜像名称&amp;gt;:&amp;lt;标签&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只能删除没有被任何容器（包括已停止的容器）使用的镜像&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果需要删除一个被使用的镜像，必须先删除所有依赖它的容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也可以使用&lt;code&gt;-f&lt;/code&gt;选项强制删除，但这可能会导致依赖该镜像的容器无法再次启动或者其他未知错误，慎用！&lt;/p&gt;
&lt;p&gt;如果不指定标签，默认删除的会是&lt;code&gt;latest&lt;/code&gt;标签，如果没有&lt;code&gt;latest&lt;/code&gt;则会报错，所以&lt;strong&gt;建议指定标签删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker rmi mynginx:mod
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723140153114.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723140153114&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;容器管理&#34;&gt;容器管理
&lt;/h2&gt;&lt;h3 id=&#34;创建并运行容器&#34;&gt;创建并运行容器
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run &lt;span style=&#34;color:#56b6c2&#34;&gt;[&lt;/span&gt;选项&lt;span style=&#34;color:#56b6c2&#34;&gt;]&lt;/span&gt; &amp;lt;镜像名称&amp;gt;:&amp;lt;标签&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常用选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;--name&lt;/code&gt;&lt;/strong&gt;：&lt;strong&gt;为容器指定一个自定义的名称&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果省略，Docker会自动生成一个随机名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/strong&gt;：&lt;strong&gt;以分离模式在后台运行容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这对于运行像Web服务器这样的长期服务很重要，否则容器会占据你的终端进行输出和报错等行为&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-P&lt;/code&gt;(大写)&lt;/strong&gt;：将容器内部所有暴露的端口&lt;strong&gt;随机映射&lt;/strong&gt;到主机的空闲端口上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-p&lt;/code&gt;(小写)&lt;/strong&gt;：&lt;strong&gt;指定端口映射&lt;/strong&gt;，其常用格式如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;主机端口:容器端口&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;docker run -d -p 8080:80 nginx&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
此命令将主机的`8080`端口映射到容器的`80`端口

- **`&amp;lt;IP地址&amp;gt;:主机端口:容器端口`**

指定只将主机的特定IP地址的端口映射到容器

```shell
docker run -d -p 127.0.0.1:8081:80 nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此命令将主机&lt;code&gt;127.0.0.1&lt;/code&gt;这个回环地址的&lt;code&gt;8081&lt;/code&gt;端口映射到容器的&lt;code&gt;80&lt;/code&gt;端口&lt;/p&gt;
&lt;p&gt;这样，只有在本机才能通过&lt;code&gt;127.0.0.1:8081&lt;/code&gt;访问，来自外部网络的访问会被拒绝&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;主机端口:&amp;lt;容器端口/协议&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，端口映射使用的是TCP协议，也可以显式指定UDP协议&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Pdocker run -d -p 8082:53/udp nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令将主机的&lt;code&gt;8082&lt;/code&gt;端口映射到nginx容器的&lt;code&gt;53&lt;/code&gt;UDP端口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;--rm&lt;/code&gt;&lt;/strong&gt;：&lt;strong&gt;使容器在停止后被自动删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;适合用于测试和运行一次性任务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run --name my-nginx -d -p 8080:80 nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个命令会执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;检查本地是否存在&lt;code&gt;nginx:latest&lt;/code&gt;镜像，如果不存在，会自动拉取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于此镜像创建一个名为 &lt;code&gt;my-nginx&lt;/code&gt; 的容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-d&lt;/code&gt;：让这个容器在后台持续运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-p 8080:80&lt;/code&gt;：将你本机的8080端口的流量转发到容器内部的80端口（Nginx默认在80端口监听）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;命令执行后，在浏览器中访问&lt;code&gt;http://你的主机IP地址:8080&lt;/code&gt;或&lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果看到Nginx的欢迎页面，则表示容器已成功运行&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250722140517678.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250722140517678&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;查看正在运行的容器&#34;&gt;查看正在运行的容器
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker ps
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723112548978.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723112548978&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CONTAINER ID&lt;/strong&gt;：容器的唯一标识，&lt;strong&gt;可以用全部或者前几位操作该容器，只要能唯一识别&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IMAGE&lt;/strong&gt;：使用的镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;COMMAND&lt;/strong&gt;：容器启动时运行的命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CREATED&lt;/strong&gt;：容器创建的时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;STATUS&lt;/strong&gt;：容器状态，这里的字段值是&lt;code&gt;UP&lt;/code&gt;，说明是一个正在运行的容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PORTS&lt;/strong&gt;：端口映射&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;0.0.0.0:8080-&amp;gt;80/tcp&lt;/code&gt;：主机所有IPv4地址的8080端口被映射到容器内部的80端口（TCP 协议）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;:::8080-&amp;gt;80/tcp&lt;/code&gt;：主机所有IPv6地址的8080端口也映射到容器内部的80端口（TCP 协议）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NAMES&lt;/strong&gt;：自定义的容器的名字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查看所有容器&#34;&gt;查看所有容器
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker ps -a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;-a&lt;/code&gt;是&lt;code&gt;all&lt;/code&gt;的缩写，代表列出所有容器，包括那些已经停止运行的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个命令可以找到旧的、已停止的容器，以便重新启动它们或将它们删除以进行清理&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723113333889.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723113333889&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这里的&lt;code&gt;STATUS&lt;/code&gt;字段是&lt;code&gt;exited&lt;/code&gt;，说明这是一个退出的、不在运行的容器&lt;/p&gt;
&lt;h3 id=&#34;停止容器&#34;&gt;停止容器
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker stop &amp;lt;容器名称&amp;gt;/&amp;lt;容器ID&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说明: 此命令会向容器内的主进程发送一个 &lt;code&gt;SIGTERM&lt;/code&gt; 信号，请求其正常关闭。应用程序会接收到这个信号并执行关闭前的清理工作。&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker stop nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723113823707.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723113823707&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;停止后，容器不在运行列表之中&lt;/p&gt;
&lt;h3 id=&#34;启动一个已停止的容器&#34;&gt;启动一个已停止的容器
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker start &amp;lt;容器名称&amp;gt;/&amp;lt;容器ID&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个命令会使一个处于Exited状态的容器恢复到Up状态，容器会保留其上次停止时的所有配置和数据。&lt;/p&gt;
&lt;p&gt;示例: docker start my-nginx&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723113946571.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723113946571&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;删除容器&#34;&gt;删除容器
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker rm &amp;lt;容器名称&amp;gt;/&amp;lt;容器ID&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;默认情况下，不能删除一个正在运行的容器，必须先使用&lt;code&gt;docker stop&lt;/code&gt;将其停止&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果确定要删除一个运行中的容器，可以添加&lt;code&gt;-f&lt;/code&gt;参数来强制执行&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;容器信息查看与交互&#34;&gt;容器信息查看与交互
&lt;/h2&gt;&lt;h3 id=&#34;查看端口映射&#34;&gt;查看端口映射
&lt;/h3&gt;&lt;p&gt;此命令可以快捷地查看一个容器的端口映射情况&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker port &amp;lt;容器名称&amp;gt;/&amp;lt;容器ID&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Shell&#34; data-lang=&#34;Shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker port nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723173634143.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723173634143&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;容器内部的80端口被映射到了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0.0.0.0:8080&lt;/code&gt;：表示主机的所有&lt;strong&gt;IPv4&lt;/strong&gt;地址上的8080端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[::]:8080&lt;/code&gt;：表示主机的所有&lt;strong&gt;IPv6&lt;/strong&gt;地址上的8080端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说，我们可以使用以下任意方式访问这个容器内的Nginx服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://127.0.0.1:8080&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://&amp;lt;主机的IP&amp;gt;:8080&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果启用了IPv6网络，还可以使用IPv6地址访问，如&lt;code&gt;http://[::1]:8080&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查看容器日志&#34;&gt;查看容器日志
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker logs &lt;span style=&#34;color:#56b6c2&#34;&gt;[&lt;/span&gt;选项&lt;span style=&#34;color:#56b6c2&#34;&gt;]&lt;/span&gt; &amp;lt;容器名称&amp;gt;/&amp;lt;容器ID&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常用选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-f&lt;/code&gt;&lt;/strong&gt;：持续跟踪并输出日志&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;--tail&lt;/code&gt;&lt;/strong&gt;：仅显示日志的最后N行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker logs nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;C:%5cUsers%5clenovo%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20250723115500967.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723115500967&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;在容器内部执行命令&#34;&gt;在容器内部执行命令
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;可以在一个运行中的容器内执行命令，而不进入其交互式Shell&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker &lt;span style=&#34;color:#e5c07b&#34;&gt;exec&lt;/span&gt; &amp;lt;容器名称&amp;gt;/&amp;lt;容器ID&amp;gt; &amp;lt;命令&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker &lt;span style=&#34;color:#e5c07b&#34;&gt;exec&lt;/span&gt; nginx ls -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723115709524.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723115709524&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;此命令会在名为&lt;code&gt;nginx&lt;/code&gt;的容器内部执行&lt;code&gt;ls -l&lt;/code&gt; 命令，并返回结果，而我们的终端仍然停留在主机上&lt;/p&gt;
&lt;h3 id=&#34;进入容器的交互式终端&#34;&gt;进入容器的交互式终端
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;对于更复杂的调试，我们就需要一个完整的Shell环境来在容器内部进行操作&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker &lt;span style=&#34;color:#e5c07b&#34;&gt;exec&lt;/span&gt; -it &amp;lt;容器名称&amp;gt;/&amp;lt;容器ID&amp;gt; /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;-it&lt;/code&gt;是两个选项的组合：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-i&lt;/code&gt;保持标准输入开启，&lt;code&gt;-t&lt;/code&gt;分配一个伪终端，这共同创建了一个可以交互的命令行界面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;/bin/bash&lt;/code&gt;是一个常见的Shell程序，有些镜像可能提供的是&lt;code&gt;/bin/sh&lt;/code&gt;，比较不好用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也可以在创建容器的时候就进入其交互式终端：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it &amp;lt;镜像名称&amp;gt;:&amp;lt;标签&amp;gt; /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker &lt;span style=&#34;color:#e5c07b&#34;&gt;exec&lt;/span&gt; -it nginx /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723121248325.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723121248325&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;执行后命令提示符改变，表示已经进入了容器，可以像在普通Linux环境中一样运行命令&lt;/p&gt;
&lt;p&gt;如果想要退出，可以使用&lt;code&gt;Ctrl+D&lt;/code&gt;，或者输入&lt;code&gt;exit&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;容器网络与连接&#34;&gt;容器网络与连接
&lt;/h2&gt;&lt;p&gt;除了端口映射，Docker还提供了强大的网络功能，允许容器之间方便、安全地互相通信&lt;/p&gt;
&lt;p&gt;在开始之前，我们需要知道docker的网络类型有哪些&lt;/p&gt;
&lt;h3 id=&#34;网络类型&#34;&gt;网络类型
&lt;/h3&gt;&lt;h4 id=&#34;bridge&#34;&gt;bridge
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;bridge&lt;/code&gt;是Docker默认的网络类型，适用于单个主机上容器之间的通信&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个容器会获得一个虚拟网卡和私有IP地址&lt;/li&gt;
&lt;li&gt;容器之间可以通过容器名通信&lt;/li&gt;
&lt;li&gt;可以使用&lt;code&gt;-p&lt;/code&gt;参数将容器端口映射到宿主机端口，实现外部访问&lt;/li&gt;
&lt;li&gt;默认的&lt;code&gt;bridge&lt;/code&gt;网络名称就是&lt;code&gt;bridge&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用于需要隔离、但仍允许访问外部网络的容器场景&lt;/p&gt;
&lt;h4 id=&#34;host&#34;&gt;host
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;容器与宿主机共享网络栈，不做任何隔离&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器没有自己的IP地址&lt;/li&gt;
&lt;li&gt;使用宿主机的IP和端口&lt;/li&gt;
&lt;li&gt;性能更好，网络开销低&lt;/li&gt;
&lt;li&gt;容器中暴露的端口不需要通过&lt;code&gt;-p&lt;/code&gt;映射&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用于对网络性能要求极高的场景&lt;/p&gt;
&lt;h4 id=&#34;none&#34;&gt;none
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;容器没有网络连接&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有分配IP地址&lt;/li&gt;
&lt;li&gt;不能访问外部网络，也不能与其他容器通信&lt;/li&gt;
&lt;li&gt;除非手动配置网络，否则容器完全断网&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用于需要自定义网络配置或完全隔离网络的场景&lt;/p&gt;
&lt;h4 id=&#34;overlay&#34;&gt;overlay
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;用于Docker Swarm集群环境中，支持多主机容器通信&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可跨宿主机连接容器&lt;/li&gt;
&lt;li&gt;基于VXLAN技术封装&lt;/li&gt;
&lt;li&gt;需要Swarm模式支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用于需要将多个 Docker 主机上的容器连接成一个网络的分布式应用&lt;/p&gt;
&lt;h4 id=&#34;macvlan&#34;&gt;macvlan
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;让容器像宿主机一样，直接拥有局域网内的独立IP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器像物理主机一样直接连接到物理网络&lt;/li&gt;
&lt;li&gt;容器具有独立MAC和IP地址&lt;/li&gt;
&lt;li&gt;可被局域网中的其他设备直接访问&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用于容器需要与局域网设备完全对等通信的场景，例如作为局域网服务节点&lt;/p&gt;
&lt;h4 id=&#34;container&#34;&gt;container
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;多个容器共享同一个网络命名空间，通过&lt;code&gt;--network container:&amp;lt;容器名&amp;gt;&lt;/code&gt;实现&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用另一个容器的网络配置&lt;/li&gt;
&lt;li&gt;容器之间通过进程间通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;适用于容器需要共享网络堆栈（如日志、监控）的情况&lt;/p&gt;
&lt;h3 id=&#34;查看当前已创建的网络&#34;&gt;查看当前已创建的网络
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker network ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723185658135.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723185658135&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NETWORK ID&lt;/strong&gt;：网络的唯一标识&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NAME&lt;/strong&gt;：网络名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DRIVER&lt;/strong&gt;：网络类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SCOPE&lt;/strong&gt;：作用范围，通常是local(本地网络)或swarm(集群网络)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建自定义网络&#34;&gt;创建自定义网络
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker network create -d bridge &amp;lt;网络名称&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/strong&gt;：指定网络类型。对于单机环境，&lt;code&gt;bridge&lt;/code&gt;是最常用的类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker network create -d bridge my-net
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723185004431.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723185004431&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;删除已定义的网络&#34;&gt;删除已定义的网络
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker network rm &amp;lt;网络名&amp;gt;/&amp;lt;网络ID&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker network rm my-net
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723185631213.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723185631213&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;连接容器到网络&#34;&gt;连接容器到网络
&lt;/h3&gt;&lt;p&gt;我们可以在启动容器时使用&lt;code&gt;--network&lt;/code&gt;选项将其连接到指定的网络&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --name &amp;lt;容器名称&amp;gt; --network &amp;lt;网络名称&amp;gt; &amp;lt;镜像名称&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;eg：&lt;/p&gt;
&lt;p&gt;我们创建两个容器并都连接到&lt;code&gt;my-net&lt;/code&gt;网络&lt;/p&gt;
&lt;p&gt;首先创建第一个容器 &lt;code&gt;nginx-1&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --name nginx-1 --network my-net nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后创建第二个容器 &lt;code&gt;nginx-2&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -d --name nginx-2 --network my-net nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723190434746.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723190434746&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;容器间通信&#34;&gt;容器间通信
&lt;/h3&gt;&lt;p&gt;当多个容器连接到同一个自定义网络时，它们可以通过&lt;strong&gt;容器名称&lt;/strong&gt;作为主机名直接互相访问&lt;/p&gt;
&lt;p&gt;我们可以进入一个容器来测试与另一个容器的连通性&lt;/p&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;p&gt;进入&lt;code&gt;nginx-1&lt;/code&gt;容器，然后&lt;code&gt;ping nginx-2&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker &lt;span style=&#34;color:#e5c07b&#34;&gt;exec&lt;/span&gt; -it nginx-1 /bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入容器后，由于nginx镜像默认没有 &lt;code&gt;ping&lt;/code&gt; 工具，我们需要先安装它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get update &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y iputils-ping
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成后，执行&lt;code&gt;ping&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ping nginx-2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723190515708.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723190515708&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，&lt;code&gt;nginx-1&lt;/code&gt; 能够成功解析 &lt;code&gt;nginx-2&lt;/code&gt; 的名称并与之通信，这证明了容器间的互联已经建立shell&lt;/p&gt;
&lt;h3 id=&#34;查看容器网络信息&#34;&gt;查看容器网络信息
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker inspect &amp;lt;对象ID或名称&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;docker inspect&lt;/code&gt;是一个非常强大的命令，用于查看&lt;strong&gt;容器、镜像、网络、卷等对象的详细底层信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它会返回一段JSON 格式的数据，包含几乎所有属性，比如网络配置、挂载卷、环境变量、启动命令等&lt;/p&gt;
&lt;p&gt;这里我们查看容器的信息，并过滤网络部分：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker inspect &amp;lt;容器ID&amp;gt;/&amp;lt;名称&amp;gt; | grep -A &lt;span style=&#34;color:#d19a66&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;NetworkSettings&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250723191822266.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250723191822266&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns配置&#34;&gt;DNS配置
&lt;/h3&gt;&lt;h4 id=&#34;全局配置&#34;&gt;全局配置
&lt;/h4&gt;&lt;p&gt;我们可以为所有Docker容器配置默认的DNS服务器&lt;/p&gt;
&lt;p&gt;这需要在Docker的守护进程配置文件&lt;code&gt;/etc/docker/daemon.json&lt;/code&gt;中添加&lt;code&gt;dns&lt;/code&gt;字段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e06c75&#34;&gt;&amp;#34;dns&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;114.114.114.114&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;8.8.8.8&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;修改此文件后，必须重启 Docker 服务才能生效&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;容器独立配置&#34;&gt;容器独立配置
&lt;/h4&gt;&lt;p&gt;如果只想为某个特定的容器指定 DNS，可以在&lt;code&gt;docker run&lt;/code&gt;时使用相关选项&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run &lt;span style=&#34;color:#56b6c2&#34;&gt;[&lt;/span&gt;DNS选项&lt;span style=&#34;color:#56b6c2&#34;&gt;]&lt;/span&gt; &amp;lt;镜像名称&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;常用DNS选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;--dns=&amp;lt;IP地址&amp;gt;&lt;/code&gt;&lt;/strong&gt;：指定容器使用的DNS服务器地址&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;--dns-search=&amp;lt;域名&amp;gt;&lt;/code&gt;&lt;/strong&gt;：指定DNS搜索域。当查找一个短主机名时，会自动追加这个域名进行尝试&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;--hostname=&amp;lt;主机名&amp;gt;&lt;/code&gt;&lt;/strong&gt;：设置容器内部的主机名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;eg：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -it --rm --hostname&lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt;myhost --dns&lt;span style=&#34;color:#56b6c2&#34;&gt;=&lt;/span&gt;114.114.114.114  nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个命令会启动一个临时的&lt;code&gt;nginx&lt;/code&gt;容器，其主机名为&lt;code&gt;myhost&lt;/code&gt;，使用&lt;code&gt;114.114.114.114&lt;/code&gt;作为DNS服务器&lt;/p&gt;
&lt;h4 id=&#34;常用dns服务器&#34;&gt;常用DNS服务器
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;阿里云公共 DNS&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;223.5.5.5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;223.6.6.6
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;114 DNS&lt;/strong&gt;（国内知名公共 DNS）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;114.114.114.114
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;114.114.115.115
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Google 公共 DNS&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;8.8.4.4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Cloudflare DNS&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.1.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.0.0.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;OpenDNS&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;208.67.222.222
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;208.67.220.220
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;docker实例安装&#34;&gt;Docker实例安装
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;各种镜像安装过程都大差不差，这里以nginx为例，其他的也能作参考&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;查看可用版本&#34;&gt;查看可用版本
&lt;/h2&gt;&lt;h3 id=&#34;访问nginx镜像库地址&#34;&gt;访问Nginx镜像库地址
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/_/nginx?tab=tags&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hub.docker.com/_/nginx?tab=tags
    
    &lt;span style=&#34;white-space: nowrap;&#34;&gt;&lt;svg width=&#34;.7em&#34;
        height=&#34;.7em&#34; viewBox=&#34;0 0 21 21&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
        &lt;path d=&#34;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&#34; fill=&#34;currentColor&#34; /&gt;
        &lt;path d=&#34;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&#34;
            fill=&#34;currentColor&#34;&gt;
    &lt;/svg&gt;&lt;/span&gt;
    
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250722123536066.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250722123536066&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以copy的字段是拉取当前版本镜像的命令，下面是一些介绍：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;字段&lt;/th&gt;
          &lt;th&gt;含义&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Digest&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;每个平台构建出的镜像唯一标识符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;OS/ARCH&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;表示支持的操作系统和架构&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Vulnerabilities&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;镜像中检测出的安全漏洞数量&lt;br /&gt;分等级：严重（红）、高（橙）、中（黄）、低（灰）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Compressed size&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;镜像下载时的压缩大小&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;使用命令查看&#34;&gt;使用命令查看
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker search nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;我们一般都使用最新的，也就是latest&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;拉取最新镜像&#34;&gt;拉取最新镜像
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker pull nginx:latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250722140134826.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250722140134826&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;查看是否拉取成功&#34;&gt;查看是否拉取成功
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker images
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250722140111160.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250722140111160&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;运行容器&#34;&gt;运行容器
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run --name nginx -p 8080:80 -d nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;ndash;name nginx&lt;/strong&gt;：容器名称改成nginx&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-p 8080:80&lt;/strong&gt;： 端口进行映射，将本地8080端口映射到容器内部的80端口&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-d&lt;/strong&gt;：设置容器在在后台一直运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试访问&#34;&gt;测试访问
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http://localhost:8080
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250722140517678.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250722140517678&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Vim编辑器完全使用教程</title>
        <link>https://blog.928330.xyz/p/vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</link>
        <pubDate>Thu, 08 May 2025 15:28:02 +0800</pubDate>
        
        <guid>https://blog.928330.xyz/p/vim%E7%BC%96%E8%BE%91%E5%99%A8%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</guid>
        <description>&lt;h1 id=&#34;vim使用方式&#34;&gt;VIM使用方式
&lt;/h1&gt;&lt;h2 id=&#34;vim键盘图&#34;&gt;vim键盘图
&lt;/h2&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/vi-vim-cheat-sheet-sch.gif&#34; alt=&#34;img&#34; style=&#34;zoom: 80%;&#34; /&gt;
&lt;h2 id=&#34;vim操作文件基本方式&#34;&gt;vim操作文件基本方式
&lt;/h2&gt;&lt;h3 id=&#34;打开文件&#34;&gt;打开文件
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单个文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim file1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多个文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim file1 file2 ... filen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该方式打开文件，显示屏默认显示第一个文件也就是 file1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件之间的切换&#34;&gt;文件之间的切换
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:ls&lt;/strong&gt; &amp;ndash; 列出 VIM 打开的所有文件&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250309200724231.png&#34; alt=&#34;image-20250309200724231&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:bn&lt;/strong&gt; &amp;ndash; 显示屏上显示第n个文件&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250309200823642.png&#34; alt=&#34;image-20250309200823642&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;h3 id=&#34;显示多个文件&#34;&gt;显示多个文件
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;左右分屏&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim -On file1 file2 ... filen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的 n 是代表有几个文件需要分屏，从左至右依次显示 n 个文件&lt;/p&gt;
&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250309201414346.png&#34; alt=&#34;image-20250309201414346&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;上下分屏&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim -on file1 file2 ... filen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;跟上一个命令不同的是 -on 中的 &lt;strong&gt;o 是小写&lt;/strong&gt;，这样将会上下依次显示 n 个文件&lt;/p&gt;
&lt;img src=&#34;C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20250309201606096.png&#34; alt=&#34;image-20250309201606096&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分屏操作ctrlw系列&#34;&gt;分屏操作（ctrl+w系列）
&lt;/h3&gt;&lt;h4 id=&#34;左右分屏&#34;&gt;左右分屏
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+s&lt;/strong&gt;  &amp;ndash; 上下分割当前打开的文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:sp file&lt;/strong&gt; &amp;ndash; 上下分割当前文件和新打开的 file&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;上下分屏&#34;&gt;上下分屏
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+v&lt;/strong&gt;  &amp;ndash; 左右分割当前打开的文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:vsp file&lt;/strong&gt; &amp;ndash; 左右分割当前文件和新打开的 file&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移动分屏&#34;&gt;移动分屏
&lt;/h4&gt;&lt;p&gt;&lt;mark&gt;&lt;strong&gt;大写字母&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+H&lt;/strong&gt;  &amp;ndash; 将当前的分屏移动到左边&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+L&lt;/strong&gt;  &amp;ndash; 将当前的分屏移动到右边&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+J&lt;/strong&gt;  &amp;ndash; 将当前的分屏移动到上边&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+K&lt;/strong&gt;  &amp;ndash; 将当前的分屏移动到下边&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;在文件间切换光标&#34;&gt;在文件间切换光标
&lt;/h4&gt;&lt;p&gt;&lt;mark&gt;&lt;strong&gt;小写字母&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+h&lt;/strong&gt;  &amp;ndash; 将当前光标定位到左边的屏幕&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+l&lt;/strong&gt;  &amp;ndash; 将当前光标定位到左边的屏幕&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+j&lt;/strong&gt;  &amp;ndash; 将当前光标定位到左边的屏幕&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+k&lt;/strong&gt;  &amp;ndash; 将当前光标定位到左边的屏幕&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;关闭分屏&#34;&gt;关闭分屏
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+c&lt;/strong&gt;  &amp;ndash; 关闭当前的分屏(多个分屏就只关闭光标所在的分屏)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+w+q&lt;/strong&gt;  &amp;ndash; 关闭当前的分屏，如果是最后一个分屏将会退出 VIM&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vim五大模式&#34;&gt;vim五大模式
&lt;/h2&gt;&lt;h3 id=&#34;普通模式&#34;&gt;普通模式
&lt;/h3&gt;&lt;p&gt;&lt;mark&gt;&lt;strong&gt;用户刚刚启动 vi/vim，便进入了普通模式&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;h4 id=&#34;普通模式移动光标&#34;&gt;普通模式移动光标
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;快速移动光标&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;输入[数字n＋方向]，代表向某个方向移动n&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;h / ← / [backspace]&lt;/strong&gt;：向左移动光标&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;j / ↓&lt;/strong&gt;：向下移动光标&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k / ↑&lt;/strong&gt;：向上移动光标&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;l / → / [space]&lt;/strong&gt;：向右移动光标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在当前行上移动光标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0 或功能键[Home]&lt;/strong&gt; &amp;ndash; 移动到行头&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;^&lt;/strong&gt; &amp;ndash; 移动到本行的第一个不是 blank 字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$ 或功能键[End]&lt;/strong&gt; &amp;ndash; 移动到行尾&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;g_&lt;/strong&gt; &amp;ndash; 移动到本行最后一个不是 blank 字符的位置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt; &amp;ndash; 光标移动到下一个单词的开头&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; &amp;ndash; 光标移动到下一个单词的结尾&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fa&lt;/strong&gt; &amp;ndash; 移动到本行下一个为 a 的字符处&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nfa&lt;/strong&gt; &amp;ndash; 移动到本行光标处开始的第 n 个 字符为 a 的地方&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fa&lt;/strong&gt; &amp;ndash; 同fa一样，光标移动方向同fa相反&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nFa&lt;/strong&gt; &amp;ndash; 同 nfa 类似，光标移动方向同 nfa相反&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ta&lt;/strong&gt; &amp;ndash; 移动光标至 a 字符的前一个字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nta&lt;/strong&gt; &amp;ndash; 移动到第n个 a 字符的前一个字符处&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ta&lt;/strong&gt; &amp;ndash; 同ta移动光标方向相反&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nTa&lt;/strong&gt; &amp;ndash; 同 nta 移动光标方向相反&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;; &amp;amp; ,&lt;/strong&gt; &amp;ndash; 当使用 f, F, t ,T, 关键字指定字符跳转的时候，使用**；&lt;strong&gt;可以快速跳转到&lt;/strong&gt;下一个&lt;strong&gt;指定的字符，&lt;/strong&gt;,** 是跳到&lt;strong&gt;前一个&lt;/strong&gt;指定的字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跨行移动光标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nG&lt;/strong&gt; &amp;ndash; 光标定位到第 n 行的行首&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gg&lt;/strong&gt; &amp;ndash; 光标定位到第一行的行首&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;G&lt;/strong&gt; &amp;ndash; 光标定位到最后一行的行首&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt; &amp;ndash; 光标定位到&lt;strong&gt;当前屏幕&lt;/strong&gt;的第一行行首&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt; &amp;ndash; 光标移动到&lt;strong&gt;当前屏幕&lt;/strong&gt;的中间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt; &amp;ndash; 光标移动到&lt;strong&gt;当前屏幕&lt;/strong&gt;的尾部&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zt&lt;/strong&gt; &amp;ndash; 把当前行移动到&lt;strong&gt;当前屏幕&lt;/strong&gt;的最上方，也就是第一行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zz&lt;/strong&gt; &amp;ndash; 把当前行移动到&lt;strong&gt;当前屏幕&lt;/strong&gt;的中间&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zb&lt;/strong&gt; &amp;ndash; 把当前行移动到&lt;strong&gt;当前屏幕&lt;/strong&gt;的尾部&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;%&lt;/strong&gt; &amp;ndash; 匹配括号移动，包括 ( , { , [ 需要把光标先移动到括号上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;* &amp;amp; #&lt;/strong&gt; &amp;ndash; 匹配光标当前所在的单词， ***** 是下一个，&lt;strong&gt;#&lt;/strong&gt; 是上一个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;翻页操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ctrl+u&lt;/strong&gt; &amp;ndash; 向&lt;strong&gt;上&lt;/strong&gt;滚动&lt;strong&gt;半&lt;/strong&gt;页&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ctrl+b&lt;/strong&gt; &amp;ndash; 向&lt;strong&gt;上&lt;/strong&gt;滚动&lt;strong&gt;一&lt;/strong&gt;页&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ctrl+d&lt;/strong&gt; &amp;ndash; 向&lt;strong&gt;下&lt;/strong&gt;滚动&lt;strong&gt;半&lt;/strong&gt;页&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ctrl+f&lt;/strong&gt; &amp;ndash; 向&lt;strong&gt;下&lt;/strong&gt;滚动&lt;strong&gt;一&lt;/strong&gt;页&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;普通模式操作文本&#34;&gt;普通模式操作文本
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;d 是删除的意思，通常搭配一个字符 ( 删除范围 ) 实现删除功能，常用的如下：&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dw&lt;/strong&gt; &amp;ndash; 删除一个单词&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dnw&lt;/strong&gt; &amp;ndash; 删除 n 个单词，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dfa&lt;/strong&gt; &amp;ndash; 删除光标处到下一个 a 的字符处（ fa 定位光标到 a 处 ）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dnfa&lt;/strong&gt; &amp;ndash; 删除光标处到第 n 个 a 的字符处&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dd&lt;/strong&gt; &amp;ndash; 删除一整行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ndd&lt;/strong&gt; &amp;ndash; 删除光标处开始的 n 行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;d$&lt;/strong&gt; &amp;ndash; 删除光标到本行的结尾&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;d0&lt;/strong&gt; &amp;ndash; 删除游标所在处到该行的最前面一个字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dH&lt;/strong&gt; &amp;ndash; 删除屏幕显示的第一行文本到光标所在的行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;d1G&lt;/strong&gt; &amp;ndash; 删除光标&lt;strong&gt;所在到第一行&lt;/strong&gt;的所有数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dG&lt;/strong&gt; &amp;ndash; 删除光标&lt;strong&gt;所在到最后一行&lt;/strong&gt;的所有数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x&lt;/strong&gt; &amp;ndash; 删除光标&lt;strong&gt;当前所在的&lt;/strong&gt;字符**(delete)**&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;X&lt;/strong&gt; &amp;ndash; 删除光标&lt;strong&gt;前面的一个&lt;/strong&gt;字符**(backspace)**&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nx&lt;/strong&gt; &amp;ndash; 向后连续删除n个字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;复制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;y 是复制的意思，通常搭配一个字符（复制范围）实现复制的功能，常用的如下：&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;yw&lt;/strong&gt; &amp;ndash; 复制一个单词，还有ynw&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yfa&lt;/strong&gt; &amp;ndash; 复制光标到下一个 a 的字符处,还有ynfa&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yy&lt;/strong&gt; &amp;ndash; 复制一行，还有nyy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;y$&lt;/strong&gt; &amp;ndash; 复制光标到本号的结尾&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yH&lt;/strong&gt; &amp;ndash; 复制屏幕显示的第一行文本到光标所在的行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;y1G&lt;/strong&gt; &amp;ndash; 复制&lt;strong&gt;光标所在行到第一行&lt;/strong&gt;的所有数据&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yG&lt;/strong&gt; &amp;ndash; 复制&lt;strong&gt;光标所在行到最后一行&lt;/strong&gt;的所有数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;粘贴&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;p是黏贴的意思，当执行完复制或者黏贴的命令以后，VIM 会把文本寄存起来&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;p(小写)&lt;/strong&gt; &amp;ndash; 在光标后开始黏贴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;P(大写)&lt;/strong&gt; &amp;ndash; 在光标前开始粘贴&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;撤销操作和恢复&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;u&lt;/strong&gt; &amp;ndash; 撤销刚才的操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ctrl+r&lt;/strong&gt; &amp;ndash; 恢复撤销操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;大小写转换&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;~&lt;/strong&gt; &amp;ndash; 将光标下的字母改变大小写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3~&lt;/strong&gt; &amp;ndash; 将光标位置开始的3个字母改变其大小写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;g~~&lt;/strong&gt; &amp;ndash; 改变当前行字母的大小写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gUU&lt;/strong&gt; &amp;ndash; 将当前行的字母改成大写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;guu&lt;/strong&gt; &amp;ndash; 将当前行的字母全改成小写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3gUU&lt;/strong&gt; &amp;ndash; 将从光标开始到下面3行字母改成大写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gUw&lt;/strong&gt; &amp;ndash; 将光标下的单词改成大写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;guw&lt;/strong&gt; &amp;ndash; 将光标下的单词改成小写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重复操作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.&lt;/strong&gt; &amp;ndash; 重复上一个操作的命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n&amp;lt;command&amp;gt;&lt;/strong&gt; &amp;ndash; 重复某个命令 n 次，如 10p复制 10 次，10dd 删除十次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;其他&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;J&lt;/strong&gt; &amp;ndash; 将光标所在行与下一行的数据结合成同一行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;c&lt;/strong&gt; &amp;ndash; 重复删除多个数据，例如向下删除 10 行，10cj&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;插入模式&#34;&gt;插入模式
&lt;/h3&gt;&lt;h4 id=&#34;进入插入模式&#34;&gt;进入插入模式
&lt;/h4&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;命令&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;i, I&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;i &amp;ndash; 从目前光标所在处输入&lt;br /&gt;I &amp;ndash; 在目前所在行的第一个非空格符处开始输入&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;a, A&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;a &amp;ndash; 从目前光标所在的下一个字符处开始输入&lt;br /&gt;A &amp;ndash; 从光标所在行的最后一个字符处开始输入&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;o, O&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;o &amp;ndash; 在目前光标所在的下一行处输入新的一行&lt;br /&gt;O &amp;ndash; 在目前光标所在的上一行处输入新的一行&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;s，S&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;s &amp;ndash; 删除光标所在处的字符然后插入需要录入的文本&lt;br /&gt;S &amp;ndash; 删除光标所在行，在当前行的行首开始插入需要录入的文本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;cw&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;删除&lt;strong&gt;从光标处开始到该单词结束&lt;/strong&gt;的所有字符，然后插入需要录入的文本&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;插入模式的命令&#34;&gt;插入模式的命令
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;&lt;mark&gt;必须知道的：&lt;code&gt;#&lt;/code&gt;是vim中的注释符号&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在输入模式中，可以使用以下按键：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字符按键以及Shift组合&lt;/strong&gt;，输入字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ENTER&lt;/strong&gt;，回车键，换行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BACK SPACE&lt;/strong&gt;，退格键，删除光标前一个字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DEL&lt;/strong&gt;，删除键，删除光标后一个字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方向键&lt;/strong&gt;，在文本中移动光标&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HOME&lt;/strong&gt;/&lt;strong&gt;END&lt;/strong&gt;，移动光标到行首/行尾&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Page Up&lt;/strong&gt;/&lt;strong&gt;Page Down&lt;/strong&gt;，上/下翻页&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Insert&lt;/strong&gt;，切换光标为输入/替换模式，光标将变成竖线/下划线&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;ESC&lt;/strong&gt;，&lt;strong&gt;退出输入模式，切换到命令模式&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;替换模式&#34;&gt;替换模式
&lt;/h3&gt;&lt;h4 id=&#34;进入替换模式&#34;&gt;进入替换模式
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt; &amp;ndash; 进入&lt;strong&gt;替换模式&lt;/strong&gt;，此时新输入的文本将直接替代/覆盖已经存在的内容，点击ESC键返回常规模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;r&lt;/strong&gt; &amp;ndash; 进入&lt;strong&gt;单字符替换模式&lt;/strong&gt;，此时新输入的字符将替代光标之下的当前字符，然后自动返回到常规模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;gR&lt;/strong&gt; &amp;ndash; 进入&lt;strong&gt;虚拟替换模式&lt;/strong&gt;，其与替换模式最主要的区别在于，对&amp;lt;Tab&amp;gt;键和换行符的不同处理方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;gr&lt;/strong&gt; &amp;ndash; 进入&lt;strong&gt;单字符虚拟替换模式&lt;/strong&gt;，在替换光标下的当前字符之后，将自动返回到常规模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;虚拟替换模式&#34;&gt;虚拟替换模式
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;Tab&amp;gt;键&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;替换模式（REPLACE）下，在原有&amp;lt;Tab&amp;gt;键处输入字母&amp;rsquo;a&amp;rsquo;，将&lt;strong&gt;直接替代&amp;lt;Tab&amp;gt;键所占用的所有空格的位置&lt;/strong&gt;&lt;/p&gt;
&lt;center class=&#34;half&#34;&gt;    &lt;img src=&#34;https://picx.zhimg.com/v2-ecdbd6903e53640aa3375ecd30287665_b.jpg&#34; width=&#34;300&#34;/&gt;    &lt;img src=&#34;http://picture.928330.xyz/typora/image-20250309213229157.png&#34; width=&#34;300&#34;/&gt; &lt;/center&gt;
&lt;p&gt;虚拟替换模式（VREPLACE）下，在原有&amp;lt;Tab&amp;gt;键处输入字母&amp;rsquo;a&amp;rsquo;，将&lt;strong&gt;仅仅替代单个空格&lt;/strong&gt;&lt;/p&gt;
&lt;center class=&#34;half&#34;&gt;    &lt;img src=&#34;https://picx.zhimg.com/v2-ecdbd6903e53640aa3375ecd30287665_b.jpg&#34; width=&#34;300&#34;/&gt;    &lt;img src=&#34;http://picture.928330.xyz/typora/image-20250310190903275.png&#34; width=&#34;300&#34;/&gt; &lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;NL&amp;gt;换行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;替换模式（REPLACE）下，输入&amp;lt;Enter&amp;gt;回车键将&lt;strong&gt;增加新行&lt;/strong&gt;：&lt;/p&gt;
&lt;center class=&#34;half&#34;&gt;    &lt;img src=&#34;http://picture.928330.xyz/typora/image-20250309214135754.png&#34; width=&#34;300&#34;/&gt;    &lt;img src=&#34;http://picture.928330.xyz/typora/image-20250309214201236.png&#34; width=&#34;300&#34;/&gt; &lt;/center&gt;
&lt;p&gt;虚拟替换模式（VREPLACE）下，输入&amp;lt;Enter&amp;gt;回车键将&lt;strong&gt;用新行替代当前行内容&lt;/strong&gt;（即清空当前行）：&lt;/p&gt;
&lt;center class=&#34;half&#34;&gt;    &lt;img src=&#34;http://picture.928330.xyz/typora/image-20250309214135754.png&#34; width=&#34;300&#34;/&gt;    &lt;img src=&#34;http://picture.928330.xyz/typora/image-20250309215042518.png&#34; width=&#34;300&#34;/&gt; &lt;/center&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;命令模式&#34;&gt;命令模式
&lt;/h3&gt;&lt;p&gt;&lt;mark&gt;&lt;strong&gt;在命令模式下按下 :（英文冒号）就进入了底线命令模式&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;有的命令要输入 / 执行&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;h4 id=&#34;命令模式常用命令&#34;&gt;命令模式常用命令
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:w&lt;/strong&gt; &amp;ndash; 保存文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:q&lt;/strong&gt; &amp;ndash; 退出 Vim 编辑器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:wq&lt;/strong&gt; &amp;ndash; 保存文件并退出 Vim 编辑器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:q!&lt;/strong&gt; &amp;ndash; 强制退出Vim编辑器，不保存修改&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:set nu&lt;/strong&gt; &amp;ndash; 显示行号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:set nonu&lt;/strong&gt; &amp;ndash; 取消行号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:n&lt;/strong&gt; &amp;ndash; 定位到第n行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:n1,n2d&lt;/strong&gt; &amp;ndash; 删除行号n1至n2之间的内容（n1和n2都代表数字）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;按 ESC 键可随时退出底线命令模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;命令模式处理文件&#34;&gt;命令模式处理文件
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;:w [filename]&lt;/strong&gt; &amp;ndash; 将编辑的数据储存成另一个文件（类似另存新档）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:r [filename]&lt;/strong&gt; &amp;ndash; 在编辑的数据中，读入另一个档案的数据，即将filenam的内容加到光标所在行后面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:n1,n2 w [filename]&lt;/strong&gt; &amp;ndash; 将 n1 到 n2 的内容储存成 filename&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;命令模式搜索文本&#34;&gt;命令模式搜索文本
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;?{目标字符串}&lt;/strong&gt; &amp;ndash; 向光标之&lt;strong&gt;上&lt;/strong&gt;寻找一个目标字符串&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/{目标字符串}&lt;/strong&gt; &amp;ndash; 向光标之&lt;strong&gt;下&lt;/strong&gt;寻找一个目标字符串&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n&lt;/strong&gt; &amp;ndash; 重复前一个搜寻的动作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt; &amp;ndash; &lt;strong&gt;反向&lt;/strong&gt;进行前一个搜寻动作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:set ic&lt;/strong&gt; &amp;ndash; 编辑器将不会区分大小写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:set noic&lt;/strong&gt; &amp;ndash; 编辑器将区分大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;命令模式替换文本&#34;&gt;命令模式替换文本
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;格式：&lt;/strong&gt;&lt;mark&gt;&lt;strong&gt;:(作用范围)s/{目标}/{替换}(/替换的标志)&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;替换的作用范围&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;标志&lt;/th&gt;
          &lt;th&gt;作用&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;s&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;当前行替换&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;%s&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;全文替换&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;n1,n2s&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;指定行替换，替换n1到n2间所有行的目标，&lt;strong&gt;n2可以是$，代指最后一行&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;&amp;rsquo;&amp;lt;,&amp;rsquo;&amp;gt;s&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;指定区域替换&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;替换的标志&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;标志&lt;/th&gt;
          &lt;th&gt;作用&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;[无]&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;只替换作用范围内，&lt;strong&gt;每行第一次出现&lt;/strong&gt;的目标&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;g&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;一次性替换所有&lt;/strong&gt;作用范围内所有的目标&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;i&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;大小写不敏感查找&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;I&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;大小写敏感查找&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;c&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;对作用范围内的目标&lt;strong&gt;逐个替换&lt;/strong&gt;，替换前需进行确认&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;替换标志可以使用多个，比如/gic&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;命令模式执行linux命令&#34;&gt;命令模式执行linux命令
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;:![command]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;打开终端窗口并打印执行命令的结果，不会改变当前编辑的文件的内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;可以使用&lt;code&gt;:!bash&lt;/code&gt;打开bash shell并执行命令&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:!date		//执行 date 命令显示时间，执行完命令以后按下键盘上的 Enter 就会返回到文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;:r ![command]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将shell命令command的结果插入到当前行的下一行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:r !date		//读取系统时间并插入到当前行的下一行
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;n1,n2 ![command]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将n1至n2行范围内的内容交给命令command处理，并将处理结果替换起始行号和结束行号指定范围中的内容&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:1,4 !sort		//将第1行到第4行的内容进行排序
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;可以只指定起始行&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:1 !tr &lt;span style=&#34;color:#56b6c2&#34;&gt;[&lt;/span&gt;a-z&lt;span style=&#34;color:#56b6c2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;[&lt;/span&gt;A-Z&lt;span style=&#34;color:#56b6c2&#34;&gt;]&lt;/span&gt;		//将第1行的小写字母转为大写字母
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;可以用.表示当前光标所在行&lt;/strong&gt;  &lt;strong&gt;(输入&lt;code&gt;!!&lt;/code&gt;会变成&lt;code&gt;:.!&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:. !tr &lt;span style=&#34;color:#56b6c2&#34;&gt;[&lt;/span&gt;a-z&lt;span style=&#34;color:#56b6c2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;[&lt;/span&gt;A-Z&lt;span style=&#34;color:#56b6c2&#34;&gt;]&lt;/span&gt;		//将当前行的小写转为大写
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;n1,n2 w ![command]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将起始行号和结束行号所指定范围的内容作为命令command的输入，不会改变当前编辑的文件的内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;可以使用&lt;code&gt;:1 w !bash&lt;/code&gt;，将会把第1行的内容作为bash命令来执行并显示结果，而且不会改变当前编辑的文件的内容&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;mark&gt;同样的 &lt;code&gt;: . w !bash&lt;/code&gt;将当前行的内容作为bash命令来执行&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;!!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重新执行最近一次运行过的命令&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;:shell&lt;/strong&gt; / &lt;strong&gt;:terminal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;打开命令终端（输入exit结束并返回vim）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;:version&lt;/code&gt;命令（按&lt;code&gt;q&lt;/code&gt;退出），查看是否包含+terminal关键字，以确认是否能使用 &lt;code&gt;:terminal&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;命令模式定义快捷键&#34;&gt;命令模式定义快捷键
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基本格式&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;模式&lt;/th&gt;
          &lt;th&gt;基本格式&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;普通模式&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;:nmap &amp;lt;key&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;仅在普通模式下有效，定义普通模式下的快捷键&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;插入模式&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;:imap &amp;lt;key&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用于定义插入模式下的快捷键&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;可视模式&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;:vmap &amp;lt;key&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用于定义可视模式下的快捷键&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;命令行模式&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;:cmap &amp;lt;key&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用于定义命令行模式下的快捷键&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;总体映射&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;:map &amp;lt;key&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;定义快捷键，适用于普通、可视、操作和选择模式，但不建议用于有冲突的情况。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;总体不可递归映射&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;:noremap &amp;lt;key&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;类似&lt;code&gt;:map&lt;/code&gt;，但是不会递归地扩展已经存在的映射，避免意外行为。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;普通模式不可递归&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;:nnoremap &amp;lt;key&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在普通模式下使用，避免递归映射&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;插入模式不可递归&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;:inoremap &amp;lt;key&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在插入模式下使用，避免递归映射&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;可视模式不可递归&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;:vnoremap &amp;lt;key&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在可视模式下使用，避免递归映射&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;缩写&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;:ab [缩写] [完整文本]&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;输入缩写后空格，自动扩展为完整文本&lt;/strong&gt;。例如：&lt;code&gt;:ab email xxxx@gmail.com&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;什么是&amp;lt;key&amp;gt;？&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;key&amp;gt; 对应的是 ^[A-Z] ， 定义快捷键时使用ctrl+v+[a-z]，使用快捷键时用对应的ctrl+[a-z]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;mark&gt;什么是递归映射？&lt;/mark&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:nmap j gg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:nmap Q j
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;如果已经做了以上映射，那么按下Q，执行的将是gg而不是j&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了避免以上问题，应该这样定义：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:nnoremap j gg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:nnoremap Q j
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;几个例子&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:map ^D Ahelloworld&amp;lt;ESC&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;在文件的光标所在行的行尾，添加 helloworld 字符串，按住组合键 ctrl + d 就会执行操作&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:map ^M I#&amp;lt;ESC&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;在文件光标处所在行的行首插入#，按住组合键 ctrl + m 就会执行操作&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:ab email xxxx@gmail.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;输入 email+空格 会把输入的 email 自动替换成 xxxx @gmail.com&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可视化模式&#34;&gt;可视化模式
&lt;/h3&gt;&lt;h4 id=&#34;进入可视化模式&#34;&gt;进入可视化模式
&lt;/h4&gt;&lt;p&gt;&lt;mark&gt;&lt;strong&gt;可视化模式可以分为以下三种：&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;v&lt;/strong&gt; &amp;ndash; &lt;strong&gt;字符可视化模式&lt;/strong&gt;，文本选择是以&lt;strong&gt;字符&lt;/strong&gt;为单位的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt; &amp;ndash; &lt;strong&gt;行可视化模式&lt;/strong&gt;，文本选择是&lt;strong&gt;以行&lt;/strong&gt;为单位的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ctrl-V&lt;/strong&gt; &amp;ndash; &lt;strong&gt;块可视化模式&lt;/strong&gt;，可以选择一个&lt;strong&gt;矩形内&lt;/strong&gt;的文本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;在任意可视化模式下使用以上命令，将会切换到对应模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;在任意可视化模式下使用I（大写i），将会切换到插入模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gv&lt;/strong&gt; &amp;ndash; 进入上一次的可视化模式，并选中当时选中的文本**（命令模式也能用此命令）**&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;按 ESC 键可随时退出可视化模式&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;可视化模式下移动光标&#34;&gt;可视化模式下移动光标
&lt;/h4&gt;&lt;p&gt;&lt;mark&gt;&lt;strong&gt;命令模式下的光标移动方法仍然适用&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;进入任意可视化模式，移动光标，会从当前位置开始，以相应方式高亮选中字符&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;o&lt;/strong&gt; &amp;ndash;  移动光标到已经选取的文本的&lt;strong&gt;结尾处&lt;/strong&gt;或者&lt;strong&gt;开头处&lt;/strong&gt;（根据现在光标所在位置确定）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;如果是块可视化模式，移动光标到对角处
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;O&lt;/strong&gt; &amp;ndash; 在&lt;strong&gt;块可视化&lt;/strong&gt;模式下，移动光标到&lt;strong&gt;同一行的结尾处或者开头处&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;可视化模式下编辑&#34;&gt;可视化模式下编辑
&lt;/h4&gt;&lt;p&gt;&lt;mark&gt;&lt;strong&gt;大部分命令模式对内容操作的命令都能在可视化模式下使用，比如：&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;d&lt;/strong&gt; &amp;ndash; 删除高亮文本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt; &amp;ndash; 删除一整行文本，&lt;strong&gt;即使只有一部分被选中了&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;c&lt;/strong&gt; &amp;ndash; 删除高亮文本并进入插入模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;y&lt;/strong&gt; &amp;ndash; 复制高亮文本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Y&lt;/strong&gt; &amp;ndash; 复制一整行文本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;p&lt;/strong&gt; &amp;ndash; 黏贴复制的文本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;~&lt;/strong&gt; &amp;ndash; 对高亮文本进行&lt;strong&gt;大小写转换&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt; / &amp;lt;&lt;/strong&gt; &amp;ndash; 对高亮文本增加/减少缩进，幅度为&lt;strong&gt;一个Tab键&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;r&lt;/strong&gt; &amp;ndash; 输入单个字符，把高亮文本所有字符逐个替换为该字符&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vim宏录制&#34;&gt;vim宏录制
&lt;/h2&gt;&lt;h3 id=&#34;宏录制的录制操作&#34;&gt;宏录制的录制操作
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;假设需要将文本的每一行的行首插入入一个 tab 键&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先将光标移动到第一行，在普通模式下按下 q 键（&lt;strong&gt;宏录制是 q 键启动的&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;按一个 a （字母随意）,表示该宏注册为 a&lt;/li&gt;
&lt;li&gt;按下 I 在行首插入一个 tab 键&lt;/li&gt;
&lt;li&gt;按下ESC退出编辑模式&lt;/li&gt;
&lt;li&gt;按下 j 将光标移动到下一行行首&lt;/li&gt;
&lt;li&gt;按下 q 键完成录制操作（&lt;strong&gt;宏录制是 q 键结束的&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;mark&gt;主要步骤：&lt;strong&gt;q(开始）&lt;/strong&gt;-&amp;gt; &lt;strong&gt;a(命名)&lt;/strong&gt; -&amp;gt; &lt;strong&gt;操作&lt;/strong&gt; -&amp;gt; &lt;strong&gt;q(结束)&lt;/strong&gt;&lt;/mark&gt;&lt;/p&gt;
&lt;h3 id=&#34;宏录制的使用&#34;&gt;宏录制的使用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;@a&lt;/strong&gt; &amp;ndash; 执行a宏录制的一系列动作，注意&lt;strong&gt;a是录制的操作名称&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n@a&lt;/strong&gt; &amp;ndash; 执行&lt;strong&gt;n次&lt;/strong&gt;a宏&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@@&lt;/strong&gt; &amp;ndash; 重复上一次使用的宏操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;vim相关案例&#34;&gt;VIM相关案例
&lt;/h1&gt;&lt;h2 id=&#34;vim缓存泄露&#34;&gt;vim缓存泄露
&lt;/h2&gt;&lt;h3 id=&#34;vim交换文件&#34;&gt;vim交换文件
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在用vim打开文件1.txt，直接关闭终端，再次试图用vim打开1.txt时会出现如下提示：&lt;/p&gt;
&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250311194714710.png&#34; alt=&#34;image-20250311194714710&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;选择恢复（R），弹出如下提示：&lt;/p&gt;
&lt;img src=&#34;http://picture.928330.xyz/typora/image-20250311195430374.png&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;&lt;strong&gt;Vim 中，当处理同一个文件发生多次异常退出时，它会依次使用不同的后缀来命名交换文件。按照你给出的模式，首次产生的交换文件名为 &lt;code&gt;.index.php.swp&lt;/code&gt;，再次意外退出后产生 &lt;code&gt;.index.php.swo&lt;/code&gt;，第三次产生的交换文件为 &lt;code&gt;.index.php.swn&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从第四次开始及之后的交换文件，Vim 会循环使用这三个后缀（.swp, .swo, .swn）&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;例题&#34;&gt;例题
&lt;/h3&gt;&lt;img src=&#34;http://picture.928330.xyz/typora/4b76d009d10ed0cb65aaad6f5f85d2cc.png&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:80%;&#34; /&gt;
&lt;p&gt;使用以下命令获取网站中的vim文件缓存：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget http://xxx/.index.php.swp -P /home       //-P指定下载位置
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用vim -r恢复文件并打开:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim -r .index.php.swp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;获取到网站源码后，进行代码审计即可&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
